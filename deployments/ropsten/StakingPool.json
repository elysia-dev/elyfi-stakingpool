{
  "address": "0xDf22280fc6fE620bEf461871665c53211e677242",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingAsset_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "rewardAsset_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvaidAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInRound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyAdmin",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RoundConflicted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StakingNotInitiated",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroReward",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardLeft",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "currentRound",
          "type": "uint8"
        }
      ],
      "name": "Claim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardPerSecond",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startTimestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endTimestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currentRound",
          "type": "uint256"
        }
      ],
      "name": "InitRound",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "userIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "userPrincipal",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "currentRound",
          "type": "uint8"
        }
      ],
      "name": "Stake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "userIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "userPrincipal",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "currentRound",
          "type": "uint8"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "round",
          "type": "uint8"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentRound",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "round",
          "type": "uint8"
        }
      ],
      "name": "getPoolData",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rewardPerSecond",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalPrincipal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastUpdateTimestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "round",
          "type": "uint8"
        }
      ],
      "name": "getRewardIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "round",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserData",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "userIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "userReward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "userPrincipal",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rewardPerSecond",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "year",
          "type": "uint16"
        },
        {
          "internalType": "uint8",
          "name": "month",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "day",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "duration",
          "type": "uint8"
        }
      ],
      "name": "initNewRound",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "migrate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardAsset",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingAsset",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd37642c336bc6317e270db5e5674be4fe72c71fb4f5aa3e71c50b7efcd04acf8",
  "receipt": {
    "to": null,
    "from": "0x75b4F94edF772E453F487BB317d3EB4c5c778Fc7",
    "contractAddress": "0xDf22280fc6fE620bEf461871665c53211e677242",
    "transactionIndex": 0,
    "gasUsed": "1160531",
    "logsBloom": "0x
    "blockHash": "0x50b72ac3030bef981b4c4dee5eaf40d4120f76f54ec92352560f015091398001",
    "transactionHash": "0xd37642c336bc6317e270db5e5674be4fe72c71fb4f5aa3e71c50b7efcd04acf8",
    "logs": [],
    "blockNumber": 10619431,
    "cumulativeGasUsed": "1160531",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2e938441D55AAafe923bA282dD8b9C84F130eB29",
    "0xf7fb1651B6B7dE55cf94E4239F4d0f9d63b9a5ce"
  ],
  "solcInputHash": "777aa92d3efb23d018be6ab5022e1ffa",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingAsset_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardAsset_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvaidAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInRound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyAdmin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RoundConflicted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StakingNotInitiated\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroReward\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardLeft\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"currentRound\",\"type\":\"uint8\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardPerSecond\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentRound\",\"type\":\"uint256\"}],\"name\":\"InitRound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userPrincipal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"currentRound\",\"type\":\"uint8\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userPrincipal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"currentRound\",\"type\":\"uint8\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"round\",\"type\":\"uint8\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRound\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"round\",\"type\":\"uint8\"}],\"name\":\"getPoolData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPrincipal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"round\",\"type\":\"uint8\"}],\"name\":\"getRewardIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"round\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"userIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userPrincipal\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"year\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"month\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"day\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"duration\",\"type\":\"uint8\"}],\"name\":\"initNewRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardAsset\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingAsset\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StakingPool.sol\":\"StakingPool\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b4820cac4f127869f6eb496c1d74fa6ac86ed24071e0f94742e6aef20e7252c\",\"license\":\"MIT\"},\"contracts/StakingPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\nimport './libraries/TimeConverter.sol';\\nimport './logic/StakingPoolLogic.sol';\\nimport './interface/IStakingPool.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\n\\ncontract StakingPool is IStakingPool {\\n  using StakingPoolLogic for PoolData;\\n  using SafeERC20 for IERC20;\\n\\n  constructor(address stakingAsset_, address rewardAsset_) {\\n    stakingAsset = IERC20(stakingAsset_);\\n    rewardAsset = IERC20(rewardAsset_);\\n    _admin = msg.sender;\\n  }\\n\\n  struct PoolData {\\n    uint256 rewardPerSecond;\\n    uint256 rewardIndex;\\n    uint256 startTimestamp;\\n    uint256 endTimestamp;\\n    uint256 totalPrincipal;\\n    uint256 lastUpdateTimestamp;\\n    mapping(address => uint256) userIndex;\\n    mapping(address => uint256) userReward;\\n    mapping(address => uint256) userPrincipal;\\n  }\\n\\n  uint8 public currentRound;\\n\\n  address internal _admin;\\n\\n  IERC20 public stakingAsset;\\n  IERC20 public rewardAsset;\\n\\n  mapping(uint8 => PoolData) internal _rounds;\\n\\n  function stake(uint256 amount) external override {\\n    PoolData storage poolData = _rounds[currentRound];\\n\\n    if (currentRound == 0) revert StakingNotInitiated();\\n\\n    if (poolData.endTimestamp < block.timestamp && poolData.startTimestamp > block.timestamp)\\n      revert NotInRound();\\n\\n    if (amount == 0) revert InvaidAmount();\\n\\n    poolData.updateStakingPool(currentRound, msg.sender);\\n\\n    stakingAsset.safeTransferFrom(msg.sender, address(this), amount);\\n\\n    poolData.userPrincipal[msg.sender] += amount;\\n    poolData.totalPrincipal += amount;\\n\\n    emit Stake(\\n      msg.sender,\\n      amount,\\n      poolData.userIndex[msg.sender],\\n      poolData.userPrincipal[msg.sender],\\n      currentRound\\n    );\\n  }\\n\\n  function claim(uint8 round) external override {\\n    PoolData storage poolData = _rounds[round];\\n\\n    uint256 reward = poolData.getUserReward(msg.sender);\\n\\n    if (reward == 0) revert ZeroReward();\\n\\n    rewardAsset.safeTransfer(msg.sender, reward);\\n\\n    poolData.userReward[msg.sender] = 0;\\n\\n    uint256 rewardLeft = rewardAsset.balanceOf(address(this));\\n\\n    emit Claim(msg.sender, reward, rewardLeft, currentRound);\\n  }\\n\\n  function withdraw(uint256 amount) external override {\\n    PoolData storage poolData = _rounds[currentRound];\\n    poolData.updateStakingPool(currentRound, msg.sender);\\n\\n    stakingAsset.safeTransfer(msg.sender, amount);\\n\\n    poolData.userPrincipal[msg.sender] -= amount;\\n    poolData.totalPrincipal -= amount;\\n\\n    emit Withdraw(\\n      msg.sender,\\n      amount,\\n      poolData.userIndex[msg.sender],\\n      poolData.userPrincipal[msg.sender],\\n      currentRound\\n    );\\n  }\\n\\n  function migrate() external override {\\n    _migrate();\\n  }\\n\\n  function _migrate() internal {\\n    uint256 totalUserReward;\\n    uint256 totalUserRound;\\n    for (uint8 i = 0; i < currentRound; i++) {\\n      PoolData storage poolData = _rounds[i];\\n      totalUserReward += poolData.userReward[msg.sender];\\n      totalUserRound += poolData.userPrincipal[msg.sender];\\n      poolData.userReward[msg.sender] = poolData.userIndex[msg.sender] = poolData.userPrincipal[\\n        msg.sender\\n      ] = 0;\\n    }\\n  }\\n\\n  function getRewardIndex(uint8 round) external view override returns (uint256) {\\n    PoolData storage poolData = _rounds[round];\\n\\n    return poolData.getRewardIndex();\\n  }\\n\\n  struct PoolDataLocalVars {\\n    uint256 rewardPerSecond;\\n    uint256 rewardIndex;\\n    uint256 startTimestamp;\\n    uint256 endTimestamp;\\n    uint256 totalPrincipal;\\n    uint256 lastUpdateTimestamp;\\n  }\\n\\n  function getPoolData(uint8 round)\\n    external\\n    view\\n    override\\n    returns (\\n      uint256 rewardPerSecond,\\n      uint256 rewardIndex,\\n      uint256 startTimestamp,\\n      uint256 endTimestamp,\\n      uint256 totalPrincipal,\\n      uint256 lastUpdateTimestamp\\n    )\\n  {\\n    PoolData storage poolData = _rounds[round];\\n\\n    return (\\n      poolData.rewardPerSecond,\\n      poolData.rewardIndex,\\n      poolData.startTimestamp,\\n      poolData.endTimestamp,\\n      poolData.totalPrincipal,\\n      poolData.lastUpdateTimestamp\\n    );\\n  }\\n\\n  function getUserData(uint8 round, address user)\\n    external\\n    view\\n    override\\n    returns (\\n      uint256 userIndex,\\n      uint256 userReward,\\n      uint256 userPrincipal\\n    )\\n  {\\n    PoolData storage poolData = _rounds[round];\\n\\n    return (poolData.userIndex[user], poolData.userPrincipal[user], poolData.getUserReward(user));\\n  }\\n\\n  function initNewRound(\\n    uint256 rewardPerSecond,\\n    uint16 year,\\n    uint8 month,\\n    uint8 day,\\n    uint8 duration\\n  ) external override onlyAdmin {\\n    PoolData storage poolDataBefore = _rounds[currentRound];\\n\\n    uint256 roundstartTimestamp = TimeConverter.toTimestamp(year, month, day);\\n\\n    if (roundstartTimestamp < poolDataBefore.endTimestamp) revert RoundConflicted();\\n\\n    uint8 newRound = currentRound + 1;\\n    (uint256 startTimestamp, uint256 endTimestamp) = _rounds[newRound].initRound(\\n      rewardPerSecond,\\n      roundstartTimestamp,\\n      duration\\n    );\\n\\n    currentRound = newRound;\\n\\n    emit InitRound(rewardPerSecond, startTimestamp, endTimestamp, currentRound);\\n  }\\n\\n  modifier onlyAdmin {\\n    if (msg.sender != _admin) revert OnlyAdmin();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xbe9b93d440c53cd8d4fbb0b329f41231f507a30411e7fce4ad37de9312037fcf\",\"license\":\"MIT\"},\"contracts/interface/IStakingPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\ninterface IStakingPool {\\n  error NotInRound();\\n  error StakingNotInitiated();\\n  error InvaidAmount();\\n  error ZeroReward();\\n  error OnlyAdmin();\\n  error RoundConflicted();\\n\\n  event Stake(\\n    address indexed user,\\n    uint256 amount,\\n    uint256 userIndex,\\n    uint256 userPrincipal,\\n    uint8 currentRound\\n  );\\n  event Withdraw(\\n    address indexed user,\\n    uint256 amount,\\n    uint256 userIndex,\\n    uint256 userPrincipal,\\n    uint8 currentRound\\n  );\\n\\n  event Claim(address indexed user, uint256 reward, uint256 rewardLeft, uint8 currentRound);\\n\\n  event InitRound(\\n    uint256 rewardPerSecond,\\n    uint256 startTimestamp,\\n    uint256 endTimestamp,\\n    uint256 currentRound\\n  );\\n\\n  function stake(uint256 amount) external;\\n\\n  function claim(uint8 round) external;\\n\\n  function withdraw(uint256 amount) external;\\n\\n  function migrate() external;\\n\\n  function getRewardIndex(uint8 round) external view returns (uint256);\\n\\n  function getPoolData(uint8 round)\\n    external\\n    view\\n    returns (\\n      uint256 rewardPerSecond,\\n      uint256 rewardIndex,\\n      uint256 startTimestamp,\\n      uint256 endTimestamp,\\n      uint256 totalPrincipal,\\n      uint256 lastUpdateTimestamp\\n    );\\n\\n  function getUserData(uint8 round, address user)\\n    external\\n    view\\n    returns (\\n      uint256 userIndex,\\n      uint256 userReward,\\n      uint256 userPrincipal\\n    );\\n\\n  function initNewRound(\\n    uint256 rewardPerSecond,\\n    uint16 year,\\n    uint8 month,\\n    uint8 day,\\n    uint8 duration\\n  ) external;\\n}\\n\",\"keccak256\":\"0x02a41b5e51bc0d622043f9541ce4de93e1479024ef66ab6d38b4a7cb4627bbfb\",\"license\":\"MIT\"},\"contracts/libraries/TimeConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\n/**\\n * @title Ethereum timestamp conversion library\\n * @author ethereum-datatime\\n */\\nlibrary TimeConverter {\\n  struct DateTime {\\n    uint16 year;\\n    uint8 month;\\n    uint8 day;\\n    uint8 hour;\\n    uint8 minute;\\n    uint8 second;\\n    uint8 weekday;\\n  }\\n\\n  uint256 constant DAY_IN_SECONDS = 86400;\\n  uint256 constant YEAR_IN_SECONDS = 31536000;\\n  uint256 constant LEAP_YEAR_IN_SECONDS = 31622400;\\n\\n  uint256 constant HOUR_IN_SECONDS = 3600;\\n  uint256 constant MINUTE_IN_SECONDS = 60;\\n\\n  uint16 constant ORIGIN_YEAR = 1970;\\n\\n  function isLeapYear(uint16 year) internal pure returns (bool) {\\n    if (year % 4 != 0) {\\n      return false;\\n    }\\n    if (year % 100 != 0) {\\n      return true;\\n    }\\n    if (year % 400 != 0) {\\n      return false;\\n    }\\n    return true;\\n  }\\n\\n  function leapYearsBefore(uint256 year) internal pure returns (uint256) {\\n    year -= 1;\\n    return year / 4 - year / 100 + year / 400;\\n  }\\n\\n  function getDaysInMonth(uint8 month, uint16 year) internal pure returns (uint8) {\\n    if (\\n      month == 1 ||\\n      month == 3 ||\\n      month == 5 ||\\n      month == 7 ||\\n      month == 8 ||\\n      month == 10 ||\\n      month == 12\\n    ) {\\n      return 31;\\n    } else if (month == 4 || month == 6 || month == 9 || month == 11) {\\n      return 30;\\n    } else if (isLeapYear(year)) {\\n      return 29;\\n    } else {\\n      return 28;\\n    }\\n  }\\n\\n  function parseTimestamp(uint256 timestamp) internal pure returns (DateTime memory dateTime) {\\n    uint256 secondsAccountedFor = 0;\\n    uint256 buf;\\n    uint8 i;\\n\\n    // Year\\n    dateTime.year = getYear(timestamp);\\n    buf = leapYearsBefore(dateTime.year) - leapYearsBefore(ORIGIN_YEAR);\\n\\n    secondsAccountedFor += LEAP_YEAR_IN_SECONDS * buf;\\n    secondsAccountedFor += YEAR_IN_SECONDS * (dateTime.year - ORIGIN_YEAR - buf);\\n\\n    // Month\\n    uint256 secondsInMonth;\\n    for (i = 1; i <= 12; i++) {\\n      secondsInMonth = DAY_IN_SECONDS * getDaysInMonth(i, dateTime.year);\\n      if (secondsInMonth + secondsAccountedFor > timestamp) {\\n        dateTime.month = i;\\n        break;\\n      }\\n      secondsAccountedFor += secondsInMonth;\\n    }\\n\\n    // Day\\n    for (i = 1; i <= getDaysInMonth(dateTime.month, dateTime.year); i++) {\\n      if (DAY_IN_SECONDS + secondsAccountedFor > timestamp) {\\n        dateTime.day = i;\\n        break;\\n      }\\n      secondsAccountedFor += DAY_IN_SECONDS;\\n    }\\n\\n    // Hour\\n    dateTime.hour = getHour(timestamp);\\n    // Minute\\n    dateTime.minute = getMinute(timestamp);\\n    // Second\\n    dateTime.second = getSecond(timestamp);\\n    // Day of week.\\n    dateTime.weekday = getWeekday(timestamp);\\n  }\\n\\n  function getYear(uint256 timestamp) internal pure returns (uint16) {\\n    uint256 secondsAccountedFor = 0;\\n    uint16 year;\\n    uint256 numLeapYears;\\n\\n    // Year\\n    year = uint16(ORIGIN_YEAR + timestamp / YEAR_IN_SECONDS);\\n    numLeapYears = leapYearsBefore(year) - leapYearsBefore(ORIGIN_YEAR);\\n\\n    secondsAccountedFor += LEAP_YEAR_IN_SECONDS * numLeapYears;\\n    secondsAccountedFor += YEAR_IN_SECONDS * (year - ORIGIN_YEAR - numLeapYears);\\n\\n    while (secondsAccountedFor > timestamp) {\\n      if (isLeapYear(uint16(year - 1))) {\\n        secondsAccountedFor -= LEAP_YEAR_IN_SECONDS;\\n      } else {\\n        secondsAccountedFor -= YEAR_IN_SECONDS;\\n      }\\n      year -= 1;\\n    }\\n    return year;\\n  }\\n\\n  function getMonth(uint256 timestamp) internal pure returns (uint8) {\\n    return parseTimestamp(timestamp).month;\\n  }\\n\\n  function getDay(uint256 timestamp) internal pure returns (uint8) {\\n    return parseTimestamp(timestamp).day;\\n  }\\n\\n  function getHour(uint256 timestamp) internal pure returns (uint8) {\\n    return uint8((timestamp / 60 / 60) % 24);\\n  }\\n\\n  function getMinute(uint256 timestamp) internal pure returns (uint8) {\\n    return uint8((timestamp / 60) % 60);\\n  }\\n\\n  function getSecond(uint256 timestamp) internal pure returns (uint8) {\\n    return uint8(timestamp % 60);\\n  }\\n\\n  function getWeekday(uint256 timestamp) internal pure returns (uint8) {\\n    return uint8((timestamp / DAY_IN_SECONDS + 4) % 7);\\n  }\\n\\n  function toTimestamp(\\n    uint16 year,\\n    uint8 month,\\n    uint8 day\\n  ) internal pure returns (uint256 timestamp) {\\n    return toTimestamp(year, month, day, 0, 0, 0);\\n  }\\n\\n  function toTimestamp(\\n    uint16 year,\\n    uint8 month,\\n    uint8 day,\\n    uint8 hour\\n  ) internal pure returns (uint256 timestamp) {\\n    return toTimestamp(year, month, day, hour, 0, 0);\\n  }\\n\\n  function toTimestamp(\\n    uint16 year,\\n    uint8 month,\\n    uint8 day,\\n    uint8 hour,\\n    uint8 minute\\n  ) internal pure returns (uint256 timestamp) {\\n    return toTimestamp(year, month, day, hour, minute, 0);\\n  }\\n\\n  function toTimestamp(\\n    uint16 year,\\n    uint8 month,\\n    uint8 day,\\n    uint8 hour,\\n    uint8 minute,\\n    uint8 second\\n  ) internal pure returns (uint256 timestamp) {\\n    uint16 i;\\n\\n    // Year\\n    for (i = ORIGIN_YEAR; i < year; i++) {\\n      if (isLeapYear(i)) {\\n        timestamp += LEAP_YEAR_IN_SECONDS;\\n      } else {\\n        timestamp += YEAR_IN_SECONDS;\\n      }\\n    }\\n\\n    // Month\\n    uint8[12] memory monthDayCounts;\\n    monthDayCounts[0] = 31;\\n    if (isLeapYear(year)) {\\n      monthDayCounts[1] = 29;\\n    } else {\\n      monthDayCounts[1] = 28;\\n    }\\n    monthDayCounts[2] = 31;\\n    monthDayCounts[3] = 30;\\n    monthDayCounts[4] = 31;\\n    monthDayCounts[5] = 30;\\n    monthDayCounts[6] = 31;\\n    monthDayCounts[7] = 31;\\n    monthDayCounts[8] = 30;\\n    monthDayCounts[9] = 31;\\n    monthDayCounts[10] = 30;\\n    monthDayCounts[11] = 31;\\n\\n    for (i = 1; i < month; i++) {\\n      timestamp += DAY_IN_SECONDS * monthDayCounts[i - 1];\\n    }\\n\\n    // Day\\n    timestamp += DAY_IN_SECONDS * (day - 1);\\n    // Hour\\n    timestamp += HOUR_IN_SECONDS * (hour);\\n    // Minute\\n    timestamp += MINUTE_IN_SECONDS * (minute);\\n    // Second\\n    timestamp += second;\\n\\n    return timestamp;\\n  }\\n}\\n\",\"keccak256\":\"0x77ef30bbc1f67bc8908106a32530965d119e73deb81f4d595185e90d81554658\",\"license\":\"MIT\"},\"contracts/logic/StakingPoolLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\nimport '../StakingPool.sol';\\nimport '../libraries/TimeConverter.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\n\\nlibrary StakingPoolLogic {\\n  using StakingPoolLogic for StakingPool.PoolData;\\n\\n  event UpdateStakingPool(\\n    address indexed user,\\n    uint256 newRewardIndex,\\n    uint256 totalPrincipal,\\n    uint8 currentRound\\n  );\\n\\n  function getRewardIndex(StakingPool.PoolData storage poolData) internal view returns (uint256) {\\n    uint256 currentTimestamp = block.timestamp < poolData.endTimestamp\\n      ? block.timestamp\\n      : poolData.endTimestamp;\\n    uint256 timeDiff = currentTimestamp - poolData.lastUpdateTimestamp;\\n    uint256 totalPrincipal = poolData.totalPrincipal;\\n\\n    if (timeDiff == 0) {\\n      return poolData.rewardIndex;\\n    }\\n\\n    if (totalPrincipal == 0) {\\n      return 0;\\n    }\\n\\n    uint256 rewardIndexDiff = (timeDiff * poolData.rewardPerSecond) / totalPrincipal;\\n\\n    return poolData.rewardIndex + rewardIndexDiff;\\n  }\\n\\n  function getUserReward(StakingPool.PoolData storage poolData, address user)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    if (poolData.userIndex[user] == 0) {\\n      return 0;\\n    }\\n    uint256 indexDiff = getRewardIndex(poolData) - poolData.userIndex[user];\\n\\n    uint256 balance = poolData.userPrincipal[user];\\n\\n    uint256 result = poolData.userReward[user] + (balance * indexDiff) / 1e9;\\n\\n    return result;\\n  }\\n\\n  function updateStakingPool(\\n    StakingPool.PoolData storage poolData,\\n    uint8 currentRound,\\n    address user\\n  ) internal {\\n    poolData.userReward[user] = getUserReward(poolData, user);\\n    poolData.rewardIndex = poolData.userIndex[user] = getRewardIndex(poolData);\\n    poolData.lastUpdateTimestamp = block.timestamp;\\n    emit UpdateStakingPool(msg.sender, poolData.rewardIndex, poolData.totalPrincipal, currentRound);\\n  }\\n\\n  function initRound(\\n    StakingPool.PoolData storage poolData,\\n    uint256 rewardPerSecond,\\n    uint256 roundStartTimestamp,\\n    uint8 duration\\n  ) internal returns (uint256, uint256) {\\n    poolData.rewardPerSecond = rewardPerSecond * 1e9;\\n    poolData.startTimestamp = roundStartTimestamp;\\n    poolData.endTimestamp = roundStartTimestamp + (duration * 1 days);\\n    poolData.lastUpdateTimestamp = block.timestamp;\\n\\n    return (poolData.startTimestamp, poolData.endTimestamp);\\n  }\\n\\n  function resetUserData(StakingPool.PoolData storage poolData, address user) internal {\\n    poolData.userReward[user] = 0;\\n    poolData.userIndex[user] = 0;\\n    poolData.userPrincipal[user] = 0;\\n  }\\n}\\n\",\"keccak256\":\"0xc786745fadc3751f4771b81595ad59d90fbf7a878ff1f2b352dffdd854f43d58\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a95760003560e01c80637776768f116100715780637776768f146101a95780638a19c8bc146101bc5780638fd3ab80146101db57806395d4063f146101e3578063a694fc3a146101f6578063be04ffd91461020957600080fd5b80630ac6702a146100ae5780631b3bd527146100de5780632e1a7d4d146101535780633b09d3b5146101685780634255a1c214610196575b600080fd5b6002546100c1906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6101266100ec36600461102f565b60ff166000908152600360208190526040909120805460018201546002830154938301546004840154600590940154929591949390929091565b604080519687526020870195909552938501929092526060840152608083015260a082015260c0016100d5565b610166610161366004610f9a565b61022a565b005b61017b610176366004611049565b610313565b604080519384526020840192909252908201526060016100d5565b6101666101a4366004610fca565b610366565b6001546100c1906001600160a01b031681565b6000546101c99060ff1681565b60405160ff90911681526020016100d5565b61016661047d565b6101666101f136600461102f565b610487565b610166610204366004610f9a565b6105ba565b61021c61021736600461102f565b610711565b6040519081526020016100d5565b6000805460ff16808252600360205260409091209061024b90829033610733565b600154610262906001600160a01b031633846107d9565b33600090815260088201602052604081208054849290610283908490611197565b925050819055508181600401600082825461029e9190611197565b90915550503360008181526006830160209081526040808320546008860183528184205493548251888152938401919091529082019290925260ff90911660608201527f66ecb22c263001ecfe4aecc5a075cfbc877869d3fab02728b0f8bfb8b08bf6d1906080015b60405180910390a25050565b60ff821660009081526003602090815260408083206001600160a01b038516845260068101835281842054600882019093529083205483928392916103588388610841565b935093509350509250925092565b60005461010090046001600160a01b0316331461039657604051634755657960e01b815260040160405180910390fd5b6000805460ff168152600360205260408120906103b48686866108fe565b905081600301548110156103db5760405163d2b3b7e960e01b815260040160405180910390fd5b600080546103ed9060ff1660016110f1565b60ff81166000908152600360205260408120919250908190610411908b8689610918565b6000805460ff191660ff8716908117909155604080518e815260208101859052908101839052606081019190915291935091507f332ab8cb2abb1a5c0619be13c533c05a84279ef1d2d78814f594f39df59122419060800160405180910390a150505050505050505050565b61048561096d565b565b60ff81166000908152600360205260408120906104a48233610841565b9050806104c457604051632706c9e160e21b815260040160405180910390fd5b6002546104db906001600160a01b031633836107d9565b33600090815260078301602052604080822082905560025490516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561053257600080fd5b505afa158015610546573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056a9190610fb2565b600054604080518581526020810184905260ff909216828201525191925033917fae4ef7abdb28a08e41e77990def7c7d8d3f4133e8838005bc1a49fe137dbfcfa9181900360600190a250505050565b6000805460ff1680825260036020526040909120906105ec576040516350f7da1560e11b815260040160405180910390fd5b4281600301541080156106025750428160020154115b1561062057604051636a67d54960e01b815260040160405180910390fd5b8161063e576040516315ad0dc760e21b815260040160405180910390fd5b60005461065090829060ff1633610733565b600154610668906001600160a01b0316333085610a15565b336000908152600882016020526040812080548492906106899084906110d9565b92505081905550818160040160008282546106a491906110d9565b90915550503360008181526006830160209081526040808320546008860183528184205493548251888152938401919091529082019290925260ff90911660608201527f9a2358088aa909a8c4d7b59a65c916782d62ee73d14b851be57582ed69e3ccb090608001610307565b60ff8116600090815260036020526040812061072c81610a53565b9392505050565b61073d8382610841565b6001600160a01b038216600090815260078501602052604090205561076183610a53565b6001600160a01b038216600090815260068501602090815260409182902083905560018601839055426005870155600486015482519384529083015260ff84169082015233907f7994e9f3b8680cde12b3d4f603192419ae0154049b1c5cc3157262c90ab4f9239060600160405180910390a2505050565b6040516001600160a01b03831660248201526044810182905261083c90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610ae0565b505050565b6001600160a01b0381166000908152600683016020526040812054610868575060006108f8565b6001600160a01b038216600090815260068401602052604081205461088c85610a53565b6108969190611197565b6001600160a01b0384166000908152600886016020526040812054919250633b9aca006108c38484611155565b6108cd9190611116565b6001600160a01b03861660009081526007880160205260409020546108f291906110d9565b93505050505b92915050565b60006109108484846000806000610bb7565b949350505050565b60008061092985633b9aca00611155565b86556002860184905561094260ff84166201518061112a565b6109519062ffffff16856110d9565b6003870181905542600588015560029096015496945050505050565b60008060005b60005460ff908116908216101561083c5760ff8116600090815260036020908152604080832033845260078101909252909120546109b190856110d9565b3360009081526008830160205260409020549094506109d090846110d9565b33600090815260088301602090815260408083208390556006850182528083208390556007909401905291822091909155915080610a0d8161121f565b915050610973565b6040516001600160a01b0380851660248301528316604482015260648101829052610a4d9085906323b872dd60e01b90608401610805565b50505050565b60008082600301544210610a6b578260030154610a6d565b425b90506000836005015482610a819190611197565b600485015490915081610a9957505050506001015490565b80610aa957506000949350505050565b84546000908290610aba9085611155565b610ac49190611116565b9050808660010154610ad691906110d9565b9695505050505050565b6000610b35826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610d769092919063ffffffff16565b80519091501561083c5780806020019051810190610b539190610f7a565b61083c5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084015b60405180910390fd5b60006107b25b8761ffff168161ffff161015610c1357610bd681610d85565b15610bf057610be96301e28500836110d9565b9150610c01565b610bfe6301e13380836110d9565b91505b80610c0b816111fd565b915050610bbd565b610c1b610f45565b601f8152610c2889610d85565b15610c3957601d6020820152610c41565b601c60208201525b601f60408201819052601e606083018190526080830182905260a0830181905260c0830182905260e0830182905261010083018190526101208301829052610140830152610160820152600191505b8760ff168261ffff161015610d005780610cab600184611174565b61ffff16600c8110610ccd57634e487b7160e01b600052603260045260246000fd5b6020020151610ce29060ff1662015180611155565b610cec90846110d9565b925081610cf8816111fd565b925050610c90565b610d0b6001886111ae565b610d1b9060ff1662015180611155565b610d2590846110d9565b9250610d3660ff8716610e10611155565b610d4090846110d9565b9250610d5060ff8616603c611155565b610d5a90846110d9565b9250610d6960ff8516846110d9565b9998505050505050505050565b60606109108484600085610de4565b6000610d9260048361123f565b61ffff1615610da357506000919050565b610dae60648361123f565b61ffff1615610dbf57506001919050565b610dcb6101908361123f565b61ffff1615610ddc57506000919050565b506001919050565b606082471015610e455760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610bae565b843b610e935760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610bae565b600080866001600160a01b03168587604051610eaf919061108a565b60006040518083038185875af1925050503d8060008114610eec576040519150601f19603f3d011682016040523d82523d6000602084013e610ef1565b606091505b5091509150610f01828286610f0c565b979650505050505050565b60608315610f1b57508161072c565b825115610f2b5782518084602001fd5b8160405162461bcd60e51b8152600401610bae91906110a6565b604051806101800160405280600c906020820280368337509192915050565b803560ff81168114610f7557600080fd5b919050565b600060208284031215610f8b578081fd5b8151801515811461072c578182fd5b600060208284031215610fab578081fd5b5035919050565b600060208284031215610fc3578081fd5b5051919050565b600080600080600060a08688031215610fe1578081fd5b85359450602086013561ffff81168114610ff9578182fd5b935061100760408701610f64565b925061101560608701610f64565b915061102360808701610f64565b90509295509295909350565b600060208284031215611040578081fd5b61072c82610f64565b6000806040838503121561105b578182fd5b61106483610f64565b915060208301356001600160a01b038116811461107f578182fd5b809150509250929050565b6000825161109c8184602087016111d1565b9190910192915050565b60208152600082518060208401526110c58160408501602087016111d1565b601f01601f19169190910160400192915050565b600082198211156110ec576110ec611260565b500190565b600060ff821660ff84168060ff0382111561110e5761110e611260565b019392505050565b60008261112557611125611276565b500490565b600062ffffff8083168185168183048111821515161561114c5761114c611260565b02949350505050565b600081600019048311821515161561116f5761116f611260565b500290565b600061ffff8381169083168181101561118f5761118f611260565b039392505050565b6000828210156111a9576111a9611260565b500390565b600060ff821660ff8416808210156111c8576111c8611260565b90039392505050565b60005b838110156111ec5781810151838201526020016111d4565b83811115610a4d5750506000910152565b600061ffff8083168181141561121557611215611260565b6001019392505050565b600060ff821660ff81141561123657611236611260565b60010192915050565b600061ffff8084168061125457611254611276565b92169190910692915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fdfea2646970667358221220486e865d1fb406c1bc8ea95f7ff7370d6da45acb3adc49673d78d6118e7add6964736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1258,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "currentRound",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 1260,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "_admin",
        "offset": 1,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1263,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "stakingAsset",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)623"
      },
      {
        "astId": 1266,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "rewardAsset",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC20)623"
      },
      {
        "astId": 1271,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "_rounds",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint8,t_struct(PoolData)1256_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)623": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint8,t_struct(PoolData)1256_storage)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => struct StakingPool.PoolData)",
        "numberOfBytes": "32",
        "value": "t_struct(PoolData)1256_storage"
      },
      "t_struct(PoolData)1256_storage": {
        "encoding": "inplace",
        "label": "struct StakingPool.PoolData",
        "members": [
          {
            "astId": 1233,
            "contract": "contracts/StakingPool.sol:StakingPool",
            "label": "rewardPerSecond",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1235,
            "contract": "contracts/StakingPool.sol:StakingPool",
            "label": "rewardIndex",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1237,
            "contract": "contracts/StakingPool.sol:StakingPool",
            "label": "startTimestamp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1239,
            "contract": "contracts/StakingPool.sol:StakingPool",
            "label": "endTimestamp",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1241,
            "contract": "contracts/StakingPool.sol:StakingPool",
            "label": "totalPrincipal",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 1243,
            "contract": "contracts/StakingPool.sol:StakingPool",
            "label": "lastUpdateTimestamp",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 1247,
            "contract": "contracts/StakingPool.sol:StakingPool",
            "label": "userIndex",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 1251,
            "contract": "contracts/StakingPool.sol:StakingPool",
            "label": "userReward",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 1255,
            "contract": "contracts/StakingPool.sol:StakingPool",
            "label": "userPrincipal",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}