{
  "language": "Solidity",
  "sources": {
    "contracts/interface/IStakingPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.4;\n\ninterface IStakingPool {\n  error NotInRound();\n  error StakingNotInitiated();\n  error InvaidAmount();\n  error ZeroReward();\n  error OnlyAdmin();\n  error RoundConflicted();\n  error NotEnoughPrincipal(uint256 principal);\n  error NotInitiatedRound(uint8 round, uint8 currentRound);\n  error ZeroPrincipal();\n\n  event Stake(\n    address indexed user,\n    uint256 amount,\n    uint256 userIndex,\n    uint256 userPrincipal,\n    uint8 currentRound\n  );\n  event Withdraw(\n    address indexed user,\n    uint256 amount,\n    uint256 userIndex,\n    uint256 userPrincipal,\n    uint8 currentRound\n  );\n\n  event Claim(address indexed user, uint256 reward, uint256 rewardLeft, uint8 currentRound);\n\n  event InitRound(\n    uint256 rewardPerSecond,\n    uint256 startTimestamp,\n    uint256 endTimestamp,\n    uint256 currentRound\n  );\n\n  event Migrate(address user, uint256 amount, uint8 migrateRound, uint8 currentRound);\n\n  function stake(uint256 amount) external;\n\n  function claim(uint8 round) external;\n\n  function withdraw(uint256 amount, uint8 round) external;\n\n  function migrate(uint256 amount, uint8 round) external;\n\n  function getRewardIndex(uint8 round) external view returns (uint256);\n\n  function getUserReward(address user, uint8 round) external view returns (uint256);\n\n  function getPoolData(uint8 round)\n    external\n    view\n    returns (\n      uint256 rewardPerSecond,\n      uint256 rewardIndex,\n      uint256 startTimestamp,\n      uint256 endTimestamp,\n      uint256 totalPrincipal,\n      uint256 lastUpdateTimestamp\n    );\n\n  function getUserData(uint8 round, address user)\n    external\n    view\n    returns (\n      uint256 userIndex,\n      uint256 userReward,\n      uint256 userPrincipal\n    );\n\n  function initNewRound(\n    uint256 rewardPerSecond,\n    uint16 year,\n    uint8 month,\n    uint8 day,\n    uint8 duration\n  ) external;\n}\n"
    },
    "contracts/StakingPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.4;\nimport './libraries/TimeConverter.sol';\nimport './logic/StakingPoolLogic.sol';\nimport './interface/IStakingPool.sol';\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\n\ncontract StakingPool is IStakingPool {\n  using StakingPoolLogic for PoolData;\n  using SafeERC20 for IERC20;\n\n  constructor(address stakingAsset_, address rewardAsset_) {\n    stakingAsset = IERC20(stakingAsset_);\n    rewardAsset = IERC20(rewardAsset_);\n    _admin = msg.sender;\n  }\n\n  struct PoolData {\n    uint256 rewardPerSecond;\n    uint256 rewardIndex;\n    uint256 startTimestamp;\n    uint256 endTimestamp;\n    uint256 totalPrincipal;\n    uint256 lastUpdateTimestamp;\n    mapping(address => uint256) userIndex;\n    mapping(address => uint256) userReward;\n    mapping(address => uint256) userPrincipal;\n  }\n\n  uint8 public currentRound;\n\n  address internal _admin;\n\n  IERC20 public stakingAsset;\n  IERC20 public rewardAsset;\n\n  mapping(uint8 => PoolData) internal _rounds;\n\n  /***************** View functions ******************/\n\n  function getRewardIndex(uint8 round) external view override returns (uint256) {\n    PoolData storage poolData = _rounds[round];\n    return poolData.getRewardIndex();\n  }\n\n  function getUserReward(address user, uint8 round) external view override returns (uint256) {\n    PoolData storage poolData = _rounds[round];\n    return poolData.getUserReward(user);\n  }\n\n  struct PoolDataLocalVars {\n    uint256 rewardPerSecond;\n    uint256 rewardIndex;\n    uint256 startTimestamp;\n    uint256 endTimestamp;\n    uint256 totalPrincipal;\n    uint256 lastUpdateTimestamp;\n  }\n\n  function getPoolData(uint8 round)\n    external\n    view\n    override\n    returns (\n      uint256 rewardPerSecond,\n      uint256 rewardIndex,\n      uint256 startTimestamp,\n      uint256 endTimestamp,\n      uint256 totalPrincipal,\n      uint256 lastUpdateTimestamp\n    )\n  {\n    PoolData storage poolData = _rounds[round];\n\n    return (\n      poolData.rewardPerSecond,\n      poolData.rewardIndex,\n      poolData.startTimestamp,\n      poolData.endTimestamp,\n      poolData.totalPrincipal,\n      poolData.lastUpdateTimestamp\n    );\n  }\n\n  function getUserData(uint8 round, address user)\n    external\n    view\n    override\n    returns (\n      uint256 userIndex,\n      uint256 userReward,\n      uint256 userPrincipal\n    )\n  {\n    PoolData storage poolData = _rounds[round];\n\n    return (poolData.userIndex[user], poolData.userReward[user], poolData.userPrincipal[user]);\n  }\n\n  /***************** External functions ******************/\n\n  function stake(uint256 amount) external override {\n    PoolData storage poolData = _rounds[currentRound];\n\n    if (currentRound == 0) revert StakingNotInitiated();\n\n    if (poolData.endTimestamp < block.timestamp || poolData.startTimestamp > block.timestamp)\n      revert NotInRound();\n\n    if (amount == 0) revert InvaidAmount();\n\n    poolData.updateStakingPool(currentRound, msg.sender);\n\n    stakingAsset.safeTransferFrom(msg.sender, address(this), amount);\n\n    poolData.userPrincipal[msg.sender] += amount;\n    poolData.totalPrincipal += amount;\n\n    emit Stake(\n      msg.sender,\n      amount,\n      poolData.userIndex[msg.sender],\n      poolData.userPrincipal[msg.sender],\n      currentRound\n    );\n  }\n\n  function withdraw(uint256 amount, uint8 round) external override {\n    _withdraw(amount, round);\n  }\n\n  function claim(uint8 round) external override {\n    _claim(msg.sender, round);\n  }\n\n  function migrate(uint256 amount, uint8 round) external override {\n    if (round >= currentRound) revert NotInitiatedRound(round, currentRound);\n    PoolData storage poolData = _rounds[round];\n    uint256 userPrincipal = poolData.userPrincipal[msg.sender];\n\n    if (userPrincipal == 0) revert ZeroPrincipal();\n\n    uint256 amountToWithdraw = userPrincipal - amount;\n\n    // Claim reward\n    if (poolData.getUserReward(msg.sender) != 0) {\n      _claim(msg.sender, round);\n    }\n\n    // Withdraw\n    if (amountToWithdraw != 0) {\n      _withdraw(amountToWithdraw, round);\n    }\n\n    // Update current pool\n    PoolData storage currentPoolData = _rounds[currentRound];\n    currentPoolData.updateStakingPool(currentRound, msg.sender);\n\n    // Migrate user principal\n    poolData.userPrincipal[msg.sender] -= amount;\n    currentPoolData.userPrincipal[msg.sender] += amount;\n\n    // Migrate total principal\n    poolData.totalPrincipal -= amount;\n    currentPoolData.totalPrincipal += amount;\n\n    emit Stake(\n      msg.sender,\n      amount,\n      currentPoolData.userIndex[msg.sender],\n      currentPoolData.userPrincipal[msg.sender],\n      currentRound\n    );\n\n    emit Migrate(msg.sender, amount, round, currentRound);\n  }\n\n  /***************** Internal functions ******************/\n\n  function _withdraw(uint256 amount, uint8 round) internal {\n    PoolData storage poolData = _rounds[round];\n\n    if (round > currentRound) revert NotInitiatedRound(round, currentRound);\n\n    uint256 amountToWithdraw = amount;\n    if (amount == type(uint256).max) {\n      amountToWithdraw = poolData.userPrincipal[msg.sender];\n    }\n\n    if (poolData.userPrincipal[msg.sender] < amountToWithdraw)\n      revert NotEnoughPrincipal(poolData.userPrincipal[msg.sender]);\n\n    poolData.updateStakingPool(round, msg.sender);\n\n    poolData.userPrincipal[msg.sender] -= amountToWithdraw;\n    poolData.totalPrincipal -= amountToWithdraw;\n\n    stakingAsset.safeTransfer(msg.sender, amountToWithdraw);\n\n    emit Withdraw(\n      msg.sender,\n      amountToWithdraw,\n      poolData.userIndex[msg.sender],\n      poolData.userPrincipal[msg.sender],\n      currentRound\n    );\n  }\n\n  function _claim(address user, uint8 round) internal {\n    if (round > currentRound) revert NotInitiatedRound(round, currentRound);\n\n    PoolData storage poolData = _rounds[round];\n\n    uint256 reward = poolData.getUserReward(user);\n\n    if (reward == 0) revert ZeroReward();\n\n    poolData.userReward[user] = 0;\n    poolData.userIndex[user] = poolData.getRewardIndex();\n\n    rewardAsset.safeTransfer(user, reward);\n\n    uint256 rewardLeft = rewardAsset.balanceOf(address(this));\n\n    emit Claim(user, reward, rewardLeft, round);\n  }\n\n  /***************** Admin Functions ******************/\n\n  function initNewRound(\n    uint256 rewardPerSecond,\n    uint16 year,\n    uint8 month,\n    uint8 day,\n    uint8 duration\n  ) external override onlyAdmin {\n    PoolData storage poolDataBefore = _rounds[currentRound];\n\n    uint256 roundstartTimestamp = TimeConverter.toTimestamp(year, month, day);\n\n    if (roundstartTimestamp < poolDataBefore.endTimestamp) revert RoundConflicted();\n\n    uint8 newRound = currentRound + 1;\n    (uint256 startTimestamp, uint256 endTimestamp) = _rounds[newRound].initRound(\n      rewardPerSecond,\n      roundstartTimestamp,\n      duration\n    );\n\n    currentRound = newRound;\n\n    emit InitRound(rewardPerSecond, startTimestamp, endTimestamp, currentRound);\n  }\n\n  function retrieveResidue() external onlyAdmin {\n    rewardAsset.safeTransfer(_admin, rewardAsset.balanceOf(address(this)));\n  }\n\n  /***************** Modifier ******************/\n\n  modifier onlyAdmin {\n    if (msg.sender != _admin) revert OnlyAdmin();\n    _;\n  }\n}\n"
    },
    "contracts/libraries/TimeConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.4;\n\n/**\n * @title Ethereum timestamp conversion library\n * @author ethereum-datatime\n */\nlibrary TimeConverter {\n  struct DateTime {\n    uint16 year;\n    uint8 month;\n    uint8 day;\n    uint8 hour;\n    uint8 minute;\n    uint8 second;\n    uint8 weekday;\n  }\n\n  uint256 constant DAY_IN_SECONDS = 86400;\n  uint256 constant YEAR_IN_SECONDS = 31536000;\n  uint256 constant LEAP_YEAR_IN_SECONDS = 31622400;\n\n  uint256 constant HOUR_IN_SECONDS = 3600;\n  uint256 constant MINUTE_IN_SECONDS = 60;\n\n  uint16 constant ORIGIN_YEAR = 1970;\n\n  function isLeapYear(uint16 year) internal pure returns (bool) {\n    if (year % 4 != 0) {\n      return false;\n    }\n    if (year % 100 != 0) {\n      return true;\n    }\n    if (year % 400 != 0) {\n      return false;\n    }\n    return true;\n  }\n\n  function leapYearsBefore(uint256 year) internal pure returns (uint256) {\n    year -= 1;\n    return year / 4 - year / 100 + year / 400;\n  }\n\n  function getDaysInMonth(uint8 month, uint16 year) internal pure returns (uint8) {\n    if (\n      month == 1 ||\n      month == 3 ||\n      month == 5 ||\n      month == 7 ||\n      month == 8 ||\n      month == 10 ||\n      month == 12\n    ) {\n      return 31;\n    } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n      return 30;\n    } else if (isLeapYear(year)) {\n      return 29;\n    } else {\n      return 28;\n    }\n  }\n\n  function parseTimestamp(uint256 timestamp) internal pure returns (DateTime memory dateTime) {\n    uint256 secondsAccountedFor = 0;\n    uint256 buf;\n    uint8 i;\n\n    // Year\n    dateTime.year = getYear(timestamp);\n    buf = leapYearsBefore(dateTime.year) - leapYearsBefore(ORIGIN_YEAR);\n\n    secondsAccountedFor += LEAP_YEAR_IN_SECONDS * buf;\n    secondsAccountedFor += YEAR_IN_SECONDS * (dateTime.year - ORIGIN_YEAR - buf);\n\n    // Month\n    uint256 secondsInMonth;\n    for (i = 1; i <= 12; i++) {\n      secondsInMonth = DAY_IN_SECONDS * getDaysInMonth(i, dateTime.year);\n      if (secondsInMonth + secondsAccountedFor > timestamp) {\n        dateTime.month = i;\n        break;\n      }\n      secondsAccountedFor += secondsInMonth;\n    }\n\n    // Day\n    for (i = 1; i <= getDaysInMonth(dateTime.month, dateTime.year); i++) {\n      if (DAY_IN_SECONDS + secondsAccountedFor > timestamp) {\n        dateTime.day = i;\n        break;\n      }\n      secondsAccountedFor += DAY_IN_SECONDS;\n    }\n\n    // Hour\n    dateTime.hour = getHour(timestamp);\n    // Minute\n    dateTime.minute = getMinute(timestamp);\n    // Second\n    dateTime.second = getSecond(timestamp);\n    // Day of week.\n    dateTime.weekday = getWeekday(timestamp);\n  }\n\n  function getYear(uint256 timestamp) internal pure returns (uint16) {\n    uint256 secondsAccountedFor = 0;\n    uint16 year;\n    uint256 numLeapYears;\n\n    // Year\n    year = uint16(ORIGIN_YEAR + timestamp / YEAR_IN_SECONDS);\n    numLeapYears = leapYearsBefore(year) - leapYearsBefore(ORIGIN_YEAR);\n\n    secondsAccountedFor += LEAP_YEAR_IN_SECONDS * numLeapYears;\n    secondsAccountedFor += YEAR_IN_SECONDS * (year - ORIGIN_YEAR - numLeapYears);\n\n    while (secondsAccountedFor > timestamp) {\n      if (isLeapYear(uint16(year - 1))) {\n        secondsAccountedFor -= LEAP_YEAR_IN_SECONDS;\n      } else {\n        secondsAccountedFor -= YEAR_IN_SECONDS;\n      }\n      year -= 1;\n    }\n    return year;\n  }\n\n  function getMonth(uint256 timestamp) internal pure returns (uint8) {\n    return parseTimestamp(timestamp).month;\n  }\n\n  function getDay(uint256 timestamp) internal pure returns (uint8) {\n    return parseTimestamp(timestamp).day;\n  }\n\n  function getHour(uint256 timestamp) internal pure returns (uint8) {\n    return uint8((timestamp / 60 / 60) % 24);\n  }\n\n  function getMinute(uint256 timestamp) internal pure returns (uint8) {\n    return uint8((timestamp / 60) % 60);\n  }\n\n  function getSecond(uint256 timestamp) internal pure returns (uint8) {\n    return uint8(timestamp % 60);\n  }\n\n  function getWeekday(uint256 timestamp) internal pure returns (uint8) {\n    return uint8((timestamp / DAY_IN_SECONDS + 4) % 7);\n  }\n\n  function toTimestamp(\n    uint16 year,\n    uint8 month,\n    uint8 day\n  ) internal pure returns (uint256 timestamp) {\n    return toTimestamp(year, month, day, 0, 0, 0);\n  }\n\n  function toTimestamp(\n    uint16 year,\n    uint8 month,\n    uint8 day,\n    uint8 hour\n  ) internal pure returns (uint256 timestamp) {\n    return toTimestamp(year, month, day, hour, 0, 0);\n  }\n\n  function toTimestamp(\n    uint16 year,\n    uint8 month,\n    uint8 day,\n    uint8 hour,\n    uint8 minute\n  ) internal pure returns (uint256 timestamp) {\n    return toTimestamp(year, month, day, hour, minute, 0);\n  }\n\n  function toTimestamp(\n    uint16 year,\n    uint8 month,\n    uint8 day,\n    uint8 hour,\n    uint8 minute,\n    uint8 second\n  ) internal pure returns (uint256 timestamp) {\n    uint16 i;\n\n    // Year\n    for (i = ORIGIN_YEAR; i < year; i++) {\n      if (isLeapYear(i)) {\n        timestamp += LEAP_YEAR_IN_SECONDS;\n      } else {\n        timestamp += YEAR_IN_SECONDS;\n      }\n    }\n\n    // Month\n    uint8[12] memory monthDayCounts;\n    monthDayCounts[0] = 31;\n    if (isLeapYear(year)) {\n      monthDayCounts[1] = 29;\n    } else {\n      monthDayCounts[1] = 28;\n    }\n    monthDayCounts[2] = 31;\n    monthDayCounts[3] = 30;\n    monthDayCounts[4] = 31;\n    monthDayCounts[5] = 30;\n    monthDayCounts[6] = 31;\n    monthDayCounts[7] = 31;\n    monthDayCounts[8] = 30;\n    monthDayCounts[9] = 31;\n    monthDayCounts[10] = 30;\n    monthDayCounts[11] = 31;\n\n    for (i = 1; i < month; i++) {\n      timestamp += DAY_IN_SECONDS * monthDayCounts[i - 1];\n    }\n\n    // Day\n    timestamp += DAY_IN_SECONDS * (day - 1);\n    // Hour\n    timestamp += HOUR_IN_SECONDS * (hour);\n    // Minute\n    timestamp += MINUTE_IN_SECONDS * (minute);\n    // Second\n    timestamp += second;\n\n    return timestamp;\n  }\n}\n"
    },
    "contracts/logic/StakingPoolLogic.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.4;\nimport '../StakingPool.sol';\nimport '../libraries/TimeConverter.sol';\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\n\nlibrary StakingPoolLogic {\n  using StakingPoolLogic for StakingPool.PoolData;\n\n  event UpdateStakingPool(\n    address indexed user,\n    uint256 newRewardIndex,\n    uint256 totalPrincipal,\n    uint8 currentRound\n  );\n\n  function getRewardIndex(StakingPool.PoolData storage poolData) internal view returns (uint256) {\n    uint256 currentTimestamp = block.timestamp < poolData.endTimestamp\n      ? block.timestamp\n      : poolData.endTimestamp;\n    uint256 timeDiff = currentTimestamp - poolData.lastUpdateTimestamp;\n    uint256 totalPrincipal = poolData.totalPrincipal;\n\n    if (timeDiff == 0) {\n      return poolData.rewardIndex;\n    }\n\n    if (totalPrincipal == 0) {\n      return poolData.rewardIndex;\n    }\n\n    uint256 rewardIndexDiff = (timeDiff * poolData.rewardPerSecond * 1e9) / totalPrincipal;\n\n    return poolData.rewardIndex + rewardIndexDiff;\n  }\n\n  function getUserReward(StakingPool.PoolData storage poolData, address user)\n    internal\n    view\n    returns (uint256)\n  {\n    if (poolData.userIndex[user] == 0) {\n      return 0;\n    }\n    uint256 indexDiff = getRewardIndex(poolData) - poolData.userIndex[user];\n\n    uint256 balance = poolData.userPrincipal[user];\n\n    uint256 result = poolData.userReward[user] + (balance * indexDiff) / 1e9;\n\n    return result;\n  }\n\n  function updateStakingPool(\n    StakingPool.PoolData storage poolData,\n    uint8 currentRound,\n    address user\n  ) internal {\n    poolData.userReward[user] = getUserReward(poolData, user);\n    poolData.rewardIndex = poolData.userIndex[user] = getRewardIndex(poolData);\n    poolData.lastUpdateTimestamp = block.timestamp < poolData.endTimestamp\n      ? block.timestamp\n      : poolData.endTimestamp;\n    emit UpdateStakingPool(msg.sender, poolData.rewardIndex, poolData.totalPrincipal, currentRound);\n  }\n\n  function initRound(\n    StakingPool.PoolData storage poolData,\n    uint256 rewardPerSecond,\n    uint256 roundStartTimestamp,\n    uint8 duration\n  ) internal returns (uint256, uint256) {\n    poolData.rewardPerSecond = rewardPerSecond;\n    poolData.startTimestamp = roundStartTimestamp;\n    poolData.endTimestamp = roundStartTimestamp + (duration * 1 days);\n    poolData.lastUpdateTimestamp = roundStartTimestamp;\n    poolData.rewardIndex = 1e18;\n\n    return (poolData.startTimestamp, poolData.endTimestamp);\n  }\n\n  function resetUserData(StakingPool.PoolData storage poolData, address user) internal {\n    poolData.userReward[user] = 0;\n    poolData.userIndex[user] = 0;\n    poolData.userPrincipal[user] = 0;\n  }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) private pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/test/StakingAsset.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.4;\n\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\n\n/**\n * @notice This ERC20 is only for the testnet.\n */\ncontract StakingAsset is ERC20 {\n  constructor() ERC20('Staking', 'Staking') {\n    _mint(msg.sender, 1e30 / 2);\n    _mint(address(this), 1e30 / 2);\n  }\n\n  /**\n   * @notice The faucet is for testing ELYFI functions\n   */\n  function faucet() external {\n    _transfer(address(this), msg.sender, 10000 * 1e18);\n  }\n}\n"
    },
    "contracts/test/RewardAsset.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.4;\n\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\n\n/**\n * @notice This ERC20 is only for the testnet.\n */\ncontract RewardAsset is ERC20 {\n  constructor() ERC20('Reward', 'Reward') {\n    _mint(msg.sender, 1e30 / 2);\n    _mint(address(this), 1e30 / 2);\n  }\n\n  /**\n   * @notice The faucet is for testing ELYFI functions\n   */\n  function faucet() external {\n    _transfer(address(this), msg.sender, 10000 * 1e18);\n  }\n}\n"
    }
  },
  "settings": {
    "outputSelection": {
      "*": {
        "*": [
          "storageLayout",
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}