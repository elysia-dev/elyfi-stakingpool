{
  "address": "0x3d8788E3f4E4f4Ac4DDe80AeAb38200191418718",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingAsset_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "rewardAsset_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvaidAmount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "principal",
          "type": "uint256"
        }
      ],
      "name": "NotEnoughPrincipal",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInRound",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "round",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "currentRound",
          "type": "uint8"
        }
      ],
      "name": "NotInitiatedRound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyAdmin",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RoundConflicted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StakingNotInitiated",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroPrincipal",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroReward",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardLeft",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "currentRound",
          "type": "uint8"
        }
      ],
      "name": "Claim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardPerSecond",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startTimestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endTimestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currentRound",
          "type": "uint256"
        }
      ],
      "name": "InitRound",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "migrateRound",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "currentRound",
          "type": "uint8"
        }
      ],
      "name": "Migrate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "userIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "userPrincipal",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "currentRound",
          "type": "uint8"
        }
      ],
      "name": "Stake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "userIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "userPrincipal",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "currentRound",
          "type": "uint8"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "round",
          "type": "uint8"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentRound",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "round",
          "type": "uint8"
        }
      ],
      "name": "getPoolData",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rewardPerSecond",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalPrincipal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastUpdateTimestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "round",
          "type": "uint8"
        }
      ],
      "name": "getRewardIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "round",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserData",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "userIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "userReward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "userPrincipal",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "round",
          "type": "uint8"
        }
      ],
      "name": "getUserReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rewardPerSecond",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "year",
          "type": "uint16"
        },
        {
          "internalType": "uint8",
          "name": "month",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "day",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "duration",
          "type": "uint8"
        }
      ],
      "name": "initNewRound",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rewardPerSecond",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "year",
          "type": "uint16"
        },
        {
          "internalType": "uint8",
          "name": "month",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "day",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "hour",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "minute",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "duration",
          "type": "uint8"
        }
      ],
      "name": "initNewRound",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "round",
          "type": "uint8"
        }
      ],
      "name": "migrate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "retrieveResidue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardAsset",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingAsset",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "round",
          "type": "uint8"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xdfb275768ba49a05c497534e2decc2ec686a13f1fd447b9826106b70ba189e9b",
  "receipt": {
    "to": null,
    "from": "0x75b4F94edF772E453F487BB317d3EB4c5c778Fc7",
    "contractAddress": "0x3d8788E3f4E4f4Ac4DDe80AeAb38200191418718",
    "transactionIndex": 3,
    "gasUsed": "1485809",
    "logsBloom": "0x
    "blockHash": "0xdb08ad633de7ebda985826400003badfce2fdfd4df287d52c614b371fb6979fb",
    "transactionHash": "0xdfb275768ba49a05c497534e2decc2ec686a13f1fd447b9826106b70ba189e9b",
    "logs": [],
    "blockNumber": 26955123,
    "cumulativeGasUsed": "4459583",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xea26b65eD9571832A7f056AB7e6B7E755bb1D7Be",
    "0x90104f13A17694CdA413220eC09220eca8f8efac"
  ],
  "solcInputHash": "fa08bf216e003d8c9cb1151578615673",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingAsset_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardAsset_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvaidAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"}],\"name\":\"NotEnoughPrincipal\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInRound\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"round\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"currentRound\",\"type\":\"uint8\"}],\"name\":\"NotInitiatedRound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyAdmin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RoundConflicted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StakingNotInitiated\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroPrincipal\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroReward\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardLeft\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"currentRound\",\"type\":\"uint8\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardPerSecond\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentRound\",\"type\":\"uint256\"}],\"name\":\"InitRound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"migrateRound\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"currentRound\",\"type\":\"uint8\"}],\"name\":\"Migrate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userPrincipal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"currentRound\",\"type\":\"uint8\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userPrincipal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"currentRound\",\"type\":\"uint8\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"round\",\"type\":\"uint8\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRound\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"round\",\"type\":\"uint8\"}],\"name\":\"getPoolData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPrincipal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"round\",\"type\":\"uint8\"}],\"name\":\"getRewardIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"round\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"userIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userPrincipal\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"round\",\"type\":\"uint8\"}],\"name\":\"getUserReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"year\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"month\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"day\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"duration\",\"type\":\"uint8\"}],\"name\":\"initNewRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"year\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"month\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"day\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"hour\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"minute\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"duration\",\"type\":\"uint8\"}],\"name\":\"initNewRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"round\",\"type\":\"uint8\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retrieveResidue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardAsset\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingAsset\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"round\",\"type\":\"uint8\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Elysia\",\"kind\":\"dev\",\"methods\":{\"claim(uint8)\":{\"params\":{\"round\":\"The round to claim\"}},\"getPoolData(uint8)\":{\"params\":{\"round\":\"The round of the pool\"},\"returns\":{\"endTimestamp\":\"The end timestamp of the round\",\"lastUpdateTimestamp\":\"The last update timestamp of the round\",\"rewardIndex\":\"The reward index of the round\",\"rewardPerSecond\":\"The total reward accrued per second in the round\",\"startTimestamp\":\"The start timestamp of the round\",\"totalPrincipal\":\"The total staked amount of the round\"}},\"getUserData(uint8,address)\":{\"params\":{\"round\":\"The round of the pool\",\"user\":\"The user address\"}},\"initNewRound(uint256,uint16,uint8,uint8,uint8)\":{\"params\":{\"day\":\"The round start day\",\"duration\":\"The duration of the initiated round\",\"month\":\"The round start month\",\"rewardPerSecond\":\"The total accrued reward per second in new round\",\"year\":\"The round start year\"}},\"initNewRound(uint256,uint16,uint8,uint8,uint8,uint8,uint8)\":{\"params\":{\"day\":\"The round start day\",\"duration\":\"The duration of the initiated round\",\"month\":\"The round start month\",\"rewardPerSecond\":\"The total accrued reward per second in new round\",\"year\":\"The round start year\"}},\"migrate(uint256,uint8)\":{\"params\":{\"amount\":\"Amount to migrate.\",\"round\":\"The closed round to migrate\"}},\"stake(uint256)\":{\"params\":{\"amount\":\"Amount to stake.\"}},\"withdraw(uint256,uint8)\":{\"params\":{\"amount\":\"Amount to withdraw\",\"round\":\"The round to withdraw\"}}},\"title\":\"Elyfi StakingPool contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claim(uint8)\":{\"notice\":\"Transfer accrued reward to msg.sender. User accrued reward will be reset and user reward index will be set to the current reward index.\"},\"getPoolData(uint8)\":{\"notice\":\"Returns the state and data of the round\"},\"getUserData(uint8,address)\":{\"notice\":\"Returns the state and data of the user\"},\"initNewRound(uint256,uint16,uint8,uint8,uint8)\":{\"notice\":\"Init the new round. After the round closed, staking is not allowed.\"},\"initNewRound(uint256,uint16,uint8,uint8,uint8,uint8,uint8)\":{\"notice\":\"Init the new round. After the round closed, staking is not allowed.\"},\"migrate(uint256,uint8)\":{\"notice\":\"Migrate the amount of principal to the current round and transfer the rest principal to the caller\"},\"stake(uint256)\":{\"notice\":\"Stake the amount of staking asset to pool contract and update data.\"},\"withdraw(uint256,uint8)\":{\"notice\":\"Withdraw the amount of principal from the pool contract and update data\"}},\"notice\":\"Users can stake their asset and earn reward for their staking. The reward calculation is based on the reward index and user balance. The amount of reward index change is inversely proportional to the total amount of supply. Accrued rewards can be obtained by multiplying the difference between the user index and the current index by the user balance. User index and the pool index is updated and aligned with in the staking and withdrawing action.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/test/StakingPoolTest.sol\":\"StakingPoolTest\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b4820cac4f127869f6eb496c1d74fa6ac86ed24071e0f94742e6aef20e7252c\",\"license\":\"MIT\"},\"contracts/interface/IStakingPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\ninterface IStakingPool {\\n  error NotInRound();\\n  error StakingNotInitiated();\\n  error InvaidAmount();\\n  error ZeroReward();\\n  error OnlyAdmin();\\n  error RoundConflicted();\\n  error NotEnoughPrincipal(uint256 principal);\\n  error NotInitiatedRound(uint8 round, uint8 currentRound);\\n  error ZeroPrincipal();\\n\\n  event Stake(\\n    address indexed user,\\n    uint256 amount,\\n    uint256 userIndex,\\n    uint256 userPrincipal,\\n    uint8 currentRound\\n  );\\n  event Withdraw(\\n    address indexed user,\\n    uint256 amount,\\n    uint256 userIndex,\\n    uint256 userPrincipal,\\n    uint8 currentRound\\n  );\\n\\n  event Claim(address indexed user, uint256 reward, uint256 rewardLeft, uint8 currentRound);\\n\\n  event InitRound(\\n    uint256 rewardPerSecond,\\n    uint256 startTimestamp,\\n    uint256 endTimestamp,\\n    uint256 currentRound\\n  );\\n\\n  event Migrate(address user, uint256 amount, uint8 migrateRound, uint8 currentRound);\\n\\n  function stake(uint256 amount) external;\\n\\n  function claim(uint8 round) external;\\n\\n  function withdraw(uint256 amount, uint8 round) external;\\n\\n  function migrate(uint256 amount, uint8 round) external;\\n\\n  function getRewardIndex(uint8 round) external view returns (uint256);\\n\\n  function getUserReward(address user, uint8 round) external view returns (uint256);\\n\\n  function getPoolData(uint8 round)\\n    external\\n    view\\n    returns (\\n      uint256 rewardPerSecond,\\n      uint256 rewardIndex,\\n      uint256 startTimestamp,\\n      uint256 endTimestamp,\\n      uint256 totalPrincipal,\\n      uint256 lastUpdateTimestamp\\n    );\\n\\n  function getUserData(uint8 round, address user)\\n    external\\n    view\\n    returns (\\n      uint256 userIndex,\\n      uint256 userReward,\\n      uint256 userPrincipal\\n    );\\n\\n  function initNewRound(\\n    uint256 rewardPerSecond,\\n    uint16 year,\\n    uint8 month,\\n    uint8 day,\\n    uint8 duration\\n  ) external;\\n}\\n\",\"keccak256\":\"0xcb8fac71622ff143a3493dde2e3145880143551536ec8364ab415eb62a825494\",\"license\":\"MIT\"},\"contracts/libraries/TimeConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\n/**\\n * @title Ethereum timestamp conversion library\\n * @author ethereum-datatime\\n */\\nlibrary TimeConverter {\\n  struct DateTime {\\n    uint16 year;\\n    uint8 month;\\n    uint8 day;\\n    uint8 hour;\\n    uint8 minute;\\n    uint8 second;\\n    uint8 weekday;\\n  }\\n\\n  uint256 constant DAY_IN_SECONDS = 86400;\\n  uint256 constant YEAR_IN_SECONDS = 31536000;\\n  uint256 constant LEAP_YEAR_IN_SECONDS = 31622400;\\n\\n  uint256 constant HOUR_IN_SECONDS = 3600;\\n  uint256 constant MINUTE_IN_SECONDS = 60;\\n\\n  uint16 constant ORIGIN_YEAR = 1970;\\n\\n  function isLeapYear(uint16 year) internal pure returns (bool) {\\n    if (year % 4 != 0) {\\n      return false;\\n    }\\n    if (year % 100 != 0) {\\n      return true;\\n    }\\n    if (year % 400 != 0) {\\n      return false;\\n    }\\n    return true;\\n  }\\n\\n  function leapYearsBefore(uint256 year) internal pure returns (uint256) {\\n    year -= 1;\\n    return year / 4 - year / 100 + year / 400;\\n  }\\n\\n  function getDaysInMonth(uint8 month, uint16 year) internal pure returns (uint8) {\\n    if (\\n      month == 1 ||\\n      month == 3 ||\\n      month == 5 ||\\n      month == 7 ||\\n      month == 8 ||\\n      month == 10 ||\\n      month == 12\\n    ) {\\n      return 31;\\n    } else if (month == 4 || month == 6 || month == 9 || month == 11) {\\n      return 30;\\n    } else if (isLeapYear(year)) {\\n      return 29;\\n    } else {\\n      return 28;\\n    }\\n  }\\n\\n  function parseTimestamp(uint256 timestamp) internal pure returns (DateTime memory dateTime) {\\n    uint256 secondsAccountedFor = 0;\\n    uint256 buf;\\n    uint8 i;\\n\\n    // Year\\n    dateTime.year = getYear(timestamp);\\n    buf = leapYearsBefore(dateTime.year) - leapYearsBefore(ORIGIN_YEAR);\\n\\n    secondsAccountedFor += LEAP_YEAR_IN_SECONDS * buf;\\n    secondsAccountedFor += YEAR_IN_SECONDS * (dateTime.year - ORIGIN_YEAR - buf);\\n\\n    // Month\\n    uint256 secondsInMonth;\\n    for (i = 1; i <= 12; i++) {\\n      secondsInMonth = DAY_IN_SECONDS * getDaysInMonth(i, dateTime.year);\\n      if (secondsInMonth + secondsAccountedFor > timestamp) {\\n        dateTime.month = i;\\n        break;\\n      }\\n      secondsAccountedFor += secondsInMonth;\\n    }\\n\\n    // Day\\n    for (i = 1; i <= getDaysInMonth(dateTime.month, dateTime.year); i++) {\\n      if (DAY_IN_SECONDS + secondsAccountedFor > timestamp) {\\n        dateTime.day = i;\\n        break;\\n      }\\n      secondsAccountedFor += DAY_IN_SECONDS;\\n    }\\n\\n    // Hour\\n    dateTime.hour = getHour(timestamp);\\n    // Minute\\n    dateTime.minute = getMinute(timestamp);\\n    // Second\\n    dateTime.second = getSecond(timestamp);\\n    // Day of week.\\n    dateTime.weekday = getWeekday(timestamp);\\n  }\\n\\n  function getYear(uint256 timestamp) internal pure returns (uint16) {\\n    uint256 secondsAccountedFor = 0;\\n    uint16 year;\\n    uint256 numLeapYears;\\n\\n    // Year\\n    year = uint16(ORIGIN_YEAR + timestamp / YEAR_IN_SECONDS);\\n    numLeapYears = leapYearsBefore(year) - leapYearsBefore(ORIGIN_YEAR);\\n\\n    secondsAccountedFor += LEAP_YEAR_IN_SECONDS * numLeapYears;\\n    secondsAccountedFor += YEAR_IN_SECONDS * (year - ORIGIN_YEAR - numLeapYears);\\n\\n    while (secondsAccountedFor > timestamp) {\\n      if (isLeapYear(uint16(year - 1))) {\\n        secondsAccountedFor -= LEAP_YEAR_IN_SECONDS;\\n      } else {\\n        secondsAccountedFor -= YEAR_IN_SECONDS;\\n      }\\n      year -= 1;\\n    }\\n    return year;\\n  }\\n\\n  function getMonth(uint256 timestamp) internal pure returns (uint8) {\\n    return parseTimestamp(timestamp).month;\\n  }\\n\\n  function getDay(uint256 timestamp) internal pure returns (uint8) {\\n    return parseTimestamp(timestamp).day;\\n  }\\n\\n  function getHour(uint256 timestamp) internal pure returns (uint8) {\\n    return uint8((timestamp / 60 / 60) % 24);\\n  }\\n\\n  function getMinute(uint256 timestamp) internal pure returns (uint8) {\\n    return uint8((timestamp / 60) % 60);\\n  }\\n\\n  function getSecond(uint256 timestamp) internal pure returns (uint8) {\\n    return uint8(timestamp % 60);\\n  }\\n\\n  function getWeekday(uint256 timestamp) internal pure returns (uint8) {\\n    return uint8((timestamp / DAY_IN_SECONDS + 4) % 7);\\n  }\\n\\n  function toTimestamp(\\n    uint16 year,\\n    uint8 month,\\n    uint8 day\\n  ) internal pure returns (uint256 timestamp) {\\n    return toTimestamp(year, month, day, 0, 0, 0);\\n  }\\n\\n  function toTimestamp(\\n    uint16 year,\\n    uint8 month,\\n    uint8 day,\\n    uint8 hour\\n  ) internal pure returns (uint256 timestamp) {\\n    return toTimestamp(year, month, day, hour, 0, 0);\\n  }\\n\\n  function toTimestamp(\\n    uint16 year,\\n    uint8 month,\\n    uint8 day,\\n    uint8 hour,\\n    uint8 minute\\n  ) internal pure returns (uint256 timestamp) {\\n    return toTimestamp(year, month, day, hour, minute, 0);\\n  }\\n\\n  function toTimestamp(\\n    uint16 year,\\n    uint8 month,\\n    uint8 day,\\n    uint8 hour,\\n    uint8 minute,\\n    uint8 second\\n  ) internal pure returns (uint256 timestamp) {\\n    uint16 i;\\n\\n    // Year\\n    for (i = ORIGIN_YEAR; i < year; i++) {\\n      if (isLeapYear(i)) {\\n        timestamp += LEAP_YEAR_IN_SECONDS;\\n      } else {\\n        timestamp += YEAR_IN_SECONDS;\\n      }\\n    }\\n\\n    // Month\\n    uint8[12] memory monthDayCounts;\\n    monthDayCounts[0] = 31;\\n    if (isLeapYear(year)) {\\n      monthDayCounts[1] = 29;\\n    } else {\\n      monthDayCounts[1] = 28;\\n    }\\n    monthDayCounts[2] = 31;\\n    monthDayCounts[3] = 30;\\n    monthDayCounts[4] = 31;\\n    monthDayCounts[5] = 30;\\n    monthDayCounts[6] = 31;\\n    monthDayCounts[7] = 31;\\n    monthDayCounts[8] = 30;\\n    monthDayCounts[9] = 31;\\n    monthDayCounts[10] = 30;\\n    monthDayCounts[11] = 31;\\n\\n    for (i = 1; i < month; i++) {\\n      timestamp += DAY_IN_SECONDS * monthDayCounts[i - 1];\\n    }\\n\\n    // Day\\n    timestamp += DAY_IN_SECONDS * (day - 1);\\n    // Hour\\n    timestamp += HOUR_IN_SECONDS * (hour);\\n    // Minute\\n    timestamp += MINUTE_IN_SECONDS * (minute);\\n    // Second\\n    timestamp += second;\\n\\n    return timestamp;\\n  }\\n}\\n\",\"keccak256\":\"0x77ef30bbc1f67bc8908106a32530965d119e73deb81f4d595185e90d81554658\",\"license\":\"MIT\"},\"contracts/logic/StakingPoolLogicTest.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\nimport '../test/StakingPoolTest.sol';\\nimport '../libraries/TimeConverter.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\n\\nlibrary StakingPoolLogicTest {\\n  using StakingPoolLogicTest for StakingPoolTest.PoolData;\\n\\n  event UpdateStakingPool(\\n    address indexed user,\\n    uint256 newRewardIndex,\\n    uint256 totalPrincipal,\\n    uint8 currentRound\\n  );\\n\\n  function getRewardIndex(StakingPoolTest.PoolData storage poolData)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    uint256 currentTimestamp = block.timestamp < poolData.endTimestamp\\n      ? block.timestamp\\n      : poolData.endTimestamp;\\n    uint256 timeDiff = currentTimestamp - poolData.lastUpdateTimestamp;\\n    uint256 totalPrincipal = poolData.totalPrincipal;\\n\\n    if (timeDiff == 0) {\\n      return poolData.rewardIndex;\\n    }\\n\\n    if (totalPrincipal == 0) {\\n      return poolData.rewardIndex;\\n    }\\n\\n    uint256 rewardIndexDiff = (timeDiff * poolData.rewardPerSecond * 1e9) / totalPrincipal;\\n\\n    return poolData.rewardIndex + rewardIndexDiff;\\n  }\\n\\n  function getUserReward(StakingPoolTest.PoolData storage poolData, address user)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    if (poolData.userIndex[user] == 0) {\\n      return 0;\\n    }\\n    uint256 indexDiff = getRewardIndex(poolData) - poolData.userIndex[user];\\n\\n    uint256 balance = poolData.userPrincipal[user];\\n\\n    uint256 result = poolData.userReward[user] + (balance * indexDiff) / 1e9;\\n\\n    return result;\\n  }\\n\\n  function updateStakingPool(\\n    StakingPoolTest.PoolData storage poolData,\\n    uint8 currentRound,\\n    address user\\n  ) internal {\\n    poolData.userReward[user] = getUserReward(poolData, user);\\n    poolData.rewardIndex = poolData.userIndex[user] = getRewardIndex(poolData);\\n    poolData.lastUpdateTimestamp = block.timestamp < poolData.endTimestamp\\n      ? block.timestamp\\n      : poolData.endTimestamp;\\n    emit UpdateStakingPool(msg.sender, poolData.rewardIndex, poolData.totalPrincipal, currentRound);\\n  }\\n\\n  function initRound(\\n    StakingPoolTest.PoolData storage poolData,\\n    uint256 rewardPerSecond,\\n    uint256 roundStartTimestamp,\\n    uint8 duration\\n  ) internal returns (uint256, uint256) {\\n    poolData.rewardPerSecond = rewardPerSecond;\\n    poolData.startTimestamp = roundStartTimestamp;\\n    poolData.endTimestamp = roundStartTimestamp + (duration * 1 days);\\n    poolData.lastUpdateTimestamp = roundStartTimestamp;\\n    poolData.rewardIndex = 1e18;\\n\\n    return (poolData.startTimestamp, poolData.endTimestamp);\\n  }\\n\\n  function resetUserData(StakingPoolTest.PoolData storage poolData, address user) internal {\\n    poolData.userReward[user] = 0;\\n    poolData.userIndex[user] = 0;\\n    poolData.userPrincipal[user] = 0;\\n  }\\n}\\n\",\"keccak256\":\"0x039af4ad27a1de93ebe819baafc5a92a711b7442c4a49f252468daf8d91e477c\",\"license\":\"MIT\"},\"contracts/test/StakingPoolTest.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\nimport '../libraries/TimeConverter.sol';\\nimport '../logic/StakingPoolLogicTest.sol';\\nimport '../interface/IStakingPool.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\n\\n/// @title Elyfi StakingPool contract\\n/// @notice Users can stake their asset and earn reward for their staking.\\n/// The reward calculation is based on the reward index and user balance. The amount of reward index change\\n/// is inversely proportional to the total amount of supply. Accrued rewards can be obtained by multiplying\\n/// the difference between the user index and the current index by the user balance. User index and the pool\\n/// index is updated and aligned with in the staking and withdrawing action.\\n/// @author Elysia\\ncontract StakingPoolTest is IStakingPool {\\n  using StakingPoolLogicTest for PoolData;\\n  using SafeERC20 for IERC20;\\n\\n  constructor(address stakingAsset_, address rewardAsset_) {\\n    stakingAsset = IERC20(stakingAsset_);\\n    rewardAsset = IERC20(rewardAsset_);\\n    _admin = msg.sender;\\n  }\\n\\n  struct PoolData {\\n    uint256 rewardPerSecond;\\n    uint256 rewardIndex;\\n    uint256 startTimestamp;\\n    uint256 endTimestamp;\\n    uint256 totalPrincipal;\\n    uint256 lastUpdateTimestamp;\\n    mapping(address => uint256) userIndex;\\n    mapping(address => uint256) userReward;\\n    mapping(address => uint256) userPrincipal;\\n  }\\n\\n  uint8 public currentRound;\\n\\n  address internal _admin;\\n\\n  IERC20 public stakingAsset;\\n  IERC20 public rewardAsset;\\n\\n  mapping(uint8 => PoolData) internal _rounds;\\n\\n  /***************** View functions ******************/\\n\\n  function getRewardIndex(uint8 round) external view override returns (uint256) {\\n    PoolData storage poolData = _rounds[round];\\n    return poolData.getRewardIndex();\\n  }\\n\\n  function getUserReward(address user, uint8 round) external view override returns (uint256) {\\n    PoolData storage poolData = _rounds[round];\\n    return poolData.getUserReward(user);\\n  }\\n\\n  struct PoolDataLocalVars {\\n    uint256 rewardPerSecond;\\n    uint256 rewardIndex;\\n    uint256 startTimestamp;\\n    uint256 endTimestamp;\\n    uint256 totalPrincipal;\\n    uint256 lastUpdateTimestamp;\\n  }\\n\\n  /// @notice Returns the state and data of the round\\n  /// @param round The round of the pool\\n  /// @return rewardPerSecond The total reward accrued per second in the round\\n  /// @return rewardIndex The reward index of the round\\n  /// @return startTimestamp The start timestamp of the round\\n  /// @return endTimestamp The end timestamp of the round\\n  /// @return totalPrincipal The total staked amount of the round\\n  /// @return lastUpdateTimestamp The last update timestamp of the round\\n  function getPoolData(uint8 round)\\n    external\\n    view\\n    override\\n    returns (\\n      uint256 rewardPerSecond,\\n      uint256 rewardIndex,\\n      uint256 startTimestamp,\\n      uint256 endTimestamp,\\n      uint256 totalPrincipal,\\n      uint256 lastUpdateTimestamp\\n    )\\n  {\\n    PoolData storage poolData = _rounds[round];\\n\\n    return (\\n      poolData.rewardPerSecond,\\n      poolData.rewardIndex,\\n      poolData.startTimestamp,\\n      poolData.endTimestamp,\\n      poolData.totalPrincipal,\\n      poolData.lastUpdateTimestamp\\n    );\\n  }\\n\\n  /// @notice Returns the state and data of the user\\n  /// @param round The round of the pool\\n  /// @param user The user address\\n  function getUserData(uint8 round, address user)\\n    external\\n    view\\n    override\\n    returns (\\n      uint256 userIndex,\\n      uint256 userReward,\\n      uint256 userPrincipal\\n    )\\n  {\\n    PoolData storage poolData = _rounds[round];\\n\\n    return (poolData.userIndex[user], poolData.userReward[user], poolData.userPrincipal[user]);\\n  }\\n\\n  /***************** External functions ******************/\\n\\n  /// @notice Stake the amount of staking asset to pool contract and update data.\\n  /// @param amount Amount to stake.\\n  function stake(uint256 amount) external override {\\n    PoolData storage poolData = _rounds[currentRound];\\n\\n    if (currentRound == 0) revert StakingNotInitiated();\\n\\n    if (poolData.endTimestamp < block.timestamp || poolData.startTimestamp > block.timestamp)\\n      revert NotInRound();\\n\\n    if (amount == 0) revert InvaidAmount();\\n\\n    poolData.updateStakingPool(currentRound, msg.sender);\\n\\n    stakingAsset.safeTransferFrom(msg.sender, address(this), amount);\\n\\n    poolData.userPrincipal[msg.sender] += amount;\\n    poolData.totalPrincipal += amount;\\n\\n    emit Stake(\\n      msg.sender,\\n      amount,\\n      poolData.userIndex[msg.sender],\\n      poolData.userPrincipal[msg.sender],\\n      currentRound\\n    );\\n  }\\n\\n  /// @notice Withdraw the amount of principal from the pool contract and update data\\n  /// @param amount Amount to withdraw\\n  /// @param round The round to withdraw\\n  function withdraw(uint256 amount, uint8 round) external override {\\n    _withdraw(amount, round);\\n  }\\n\\n  /// @notice Transfer accrued reward to msg.sender. User accrued reward will be reset and user reward index will be set to the current reward index.\\n  /// @param round The round to claim\\n  function claim(uint8 round) external override {\\n    _claim(msg.sender, round);\\n  }\\n\\n  /// @notice Migrate the amount of principal to the current round and transfer the rest principal to the caller\\n  /// @param amount Amount to migrate.\\n  /// @param round The closed round to migrate\\n  function migrate(uint256 amount, uint8 round) external override {\\n    if (round >= currentRound) revert NotInitiatedRound(round, currentRound);\\n    PoolData storage poolData = _rounds[round];\\n    uint256 userPrincipal = poolData.userPrincipal[msg.sender];\\n\\n    if (userPrincipal == 0) revert ZeroPrincipal();\\n\\n    uint256 amountToWithdraw = userPrincipal - amount;\\n\\n    // Claim reward\\n    if (poolData.getUserReward(msg.sender) != 0) {\\n      _claim(msg.sender, round);\\n    }\\n\\n    // Withdraw\\n    if (amountToWithdraw != 0) {\\n      _withdraw(amountToWithdraw, round);\\n    }\\n\\n    // Update current pool\\n    PoolData storage currentPoolData = _rounds[currentRound];\\n    currentPoolData.updateStakingPool(currentRound, msg.sender);\\n\\n    // Migrate user principal\\n    poolData.userPrincipal[msg.sender] -= amount;\\n    currentPoolData.userPrincipal[msg.sender] += amount;\\n\\n    // Migrate total principal\\n    poolData.totalPrincipal -= amount;\\n    currentPoolData.totalPrincipal += amount;\\n\\n    emit Stake(\\n      msg.sender,\\n      amount,\\n      currentPoolData.userIndex[msg.sender],\\n      currentPoolData.userPrincipal[msg.sender],\\n      currentRound\\n    );\\n\\n    emit Migrate(msg.sender, amount, round, currentRound);\\n  }\\n\\n  /***************** Internal functions ******************/\\n\\n  function _withdraw(uint256 amount, uint8 round) internal {\\n    PoolData storage poolData = _rounds[round];\\n\\n    if (round > currentRound) revert NotInitiatedRound(round, currentRound);\\n\\n    uint256 amountToWithdraw = amount;\\n    if (amount == type(uint256).max) {\\n      amountToWithdraw = poolData.userPrincipal[msg.sender];\\n    }\\n\\n    if (poolData.userPrincipal[msg.sender] < amountToWithdraw)\\n      revert NotEnoughPrincipal(poolData.userPrincipal[msg.sender]);\\n\\n    poolData.updateStakingPool(round, msg.sender);\\n\\n    poolData.userPrincipal[msg.sender] -= amountToWithdraw;\\n    poolData.totalPrincipal -= amountToWithdraw;\\n\\n    stakingAsset.safeTransfer(msg.sender, amountToWithdraw);\\n\\n    emit Withdraw(\\n      msg.sender,\\n      amountToWithdraw,\\n      poolData.userIndex[msg.sender],\\n      poolData.userPrincipal[msg.sender],\\n      currentRound\\n    );\\n  }\\n\\n  function _claim(address user, uint8 round) internal {\\n    if (round > currentRound) revert NotInitiatedRound(round, currentRound);\\n\\n    PoolData storage poolData = _rounds[round];\\n\\n    uint256 reward = poolData.getUserReward(user);\\n\\n    if (reward == 0) revert ZeroReward();\\n\\n    poolData.userReward[user] = 0;\\n    poolData.userIndex[user] = poolData.getRewardIndex();\\n\\n    rewardAsset.safeTransfer(user, reward);\\n\\n    uint256 rewardLeft = rewardAsset.balanceOf(address(this));\\n\\n    emit Claim(user, reward, rewardLeft, round);\\n  }\\n\\n  /***************** Admin Functions ******************/\\n\\n  /// @notice Init the new round. After the round closed, staking is not allowed.\\n  /// @param rewardPerSecond The total accrued reward per second in new round\\n  /// @param year The round start year\\n  /// @param month The round start month\\n  /// @param day The round start day\\n  /// @param duration The duration of the initiated round\\n  function initNewRound(\\n    uint256 rewardPerSecond,\\n    uint16 year,\\n    uint8 month,\\n    uint8 day,\\n    uint8 duration\\n  ) external override onlyAdmin {\\n    PoolData storage poolDataBefore = _rounds[currentRound];\\n\\n    uint256 roundstartTimestamp = TimeConverter.toTimestamp(year, month, day, 10);\\n\\n    if (roundstartTimestamp < poolDataBefore.endTimestamp) revert RoundConflicted();\\n\\n    uint8 newRound = currentRound + 1;\\n    (uint256 startTimestamp, uint256 endTimestamp) = _rounds[newRound].initRound(\\n      rewardPerSecond,\\n      roundstartTimestamp,\\n      duration\\n    );\\n\\n    currentRound = newRound;\\n\\n    emit InitRound(rewardPerSecond, startTimestamp, endTimestamp, currentRound);\\n  }\\n\\n  /// @notice Init the new round. After the round closed, staking is not allowed.\\n  /// @param rewardPerSecond The total accrued reward per second in new round\\n  /// @param year The round start year\\n  /// @param month The round start month\\n  /// @param day The round start day\\n  /// @param duration The duration of the initiated round\\n  function initNewRound(\\n    uint256 rewardPerSecond,\\n    uint16 year,\\n    uint8 month,\\n    uint8 day,\\n    uint8 hour,\\n    uint8 minute,\\n    uint8 duration\\n  ) external onlyAdmin {\\n    PoolData storage poolDataBefore = _rounds[currentRound];\\n\\n    uint256 roundstartTimestamp = TimeConverter.toTimestamp(year, month, day, hour, minute);\\n\\n    uint8 newRound = currentRound + 1;\\n    (uint256 startTimestamp, uint256 endTimestamp) = _rounds[newRound].initRound(\\n      rewardPerSecond,\\n      roundstartTimestamp,\\n      duration\\n    );\\n\\n    currentRound = newRound;\\n\\n    emit InitRound(rewardPerSecond, startTimestamp, endTimestamp, currentRound);\\n  }\\n\\n  function retrieveResidue() external onlyAdmin {\\n    rewardAsset.safeTransfer(_admin, rewardAsset.balanceOf(address(this)));\\n  }\\n\\n  /***************** Modifier ******************/\\n\\n  modifier onlyAdmin() {\\n    if (msg.sender != _admin) revert OnlyAdmin();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x40c7014ffbecf24221dcec721d36795e5bd5e6b1885706f6a6075ab19cd3d0aa\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620019863803806200198683398101604081905262000034916200009b565b600180546001600160a01b03199081166001600160a01b0394851617909155600280549091169190921617905560008054610100600160a81b0319166101003302179055620000d2565b80516001600160a01b03811681146200009657600080fd5b919050565b60008060408385031215620000ae578182fd5b620000b9836200007e565b9150620000c9602084016200007e565b90509250929050565b6118a480620000e26000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063903d42961161008c578063aa1f627c11610066578063aa1f627c146102a6578063b711c5bc146102b9578063be04ffd9146102c1578063edab62f5146102d457600080fd5b8063903d42961461026d57806395d4063f14610280578063a694fc3a1461029357600080fd5b80634255a1c2116100c85780634255a1c2146102055780634574ecff1461021a5780637776768f1461023b5780638a19c8bc1461024e57600080fd5b80630ac6702a146100ef5780631b3bd5271461011f5780633b09d3b514610194575b600080fd5b600254610102906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61016761012d366004611649565b60ff166000908152600360208190526040909120805460018201546002830154938301546004840154600590940154929591949390929091565b604080519687526020870195909552938501929092526060840152608083015260a082015260c001610116565b6101ea6101a2366004611663565b60ff9190911660009081526003602090815260408083206001600160a01b03909416835260068401825280832054600785018352818420546008909501909252909120549092565b60408051938452602084019290925290820152606001610116565b61021861021336600461154c565b6102e7565b005b61022d6102283660046114ca565b610400565b604051908152602001610116565b600154610102906001600160a01b031681565b60005461025b9060ff1681565b60405160ff9091168152602001610116565b61021861027b366004611627565b610426565b61021861028e366004611649565b610434565b6102186102a136600461151c565b610441565b6102186102b43660046115a9565b61059e565b6102186106a4565b61022d6102cf366004611649565b610772565b6102186102e2366004611627565b610794565b60005461010090046001600160a01b0316331461031757604051634755657960e01b815260040160405180910390fd5b6000805460ff16815260036020526040812090610337868686600a6109ae565b9050816003015481101561035e5760405163d2b3b7e960e01b815260040160405180910390fd5b600080546103709060ff1660016116f3565b60ff81166000908152600360205260408120919250908190610394908b86896109c8565b6000805460ff191660ff8716908117909155604080518e815260208101859052908101839052606081019190915291935091507f332ab8cb2abb1a5c0619be13c533c05a84279ef1d2d78814f594f39df59122419060800160405180910390a150505050505050505050565b60ff8116600090815260036020526040812061041c8185610a1f565b9150505b92915050565b6104308282610ada565b5050565b61043e3382610c5e565b50565b6000805460ff168082526003602052604090912090610473576040516350f7da1560e11b815260040160405180910390fd5b42816003015410806104885750428160020154115b156104a657604051636a67d54960e01b815260040160405180910390fd5b816104c4576040516315ad0dc760e21b815260040160405180910390fd5b6000546104d690829060ff1633610dfb565b6001546104ee906001600160a01b0316333085610ebc565b3360009081526008820160205260408120805484929061050f9084906116db565b925050819055508181600401600082825461052a91906116db565b90915550503360008181526006830160209081526040808320546008860183528184205493548251888152938401919091529082019290925260ff90911660608201527f9a2358088aa909a8c4d7b59a65c916782d62ee73d14b851be57582ed69e3ccb09060800160405180910390a25050565b60005461010090046001600160a01b031633146105ce57604051634755657960e01b815260040160405180910390fd5b6000805460ff168152600360205260408120906105ee8888888888610f2d565b60008054919250906106049060ff1660016116f3565b60ff81166000908152600360205260408120919250908190610628908d86896109c8565b6000805460ff871660ff1990911681179091556040519294509092507f332ab8cb2abb1a5c0619be13c533c05a84279ef1d2d78814f594f39df59122419161068e918f91869186919384526020840192909252604083015260ff16606082015260800190565b60405180910390a1505050505050505050505050565b60005461010090046001600160a01b031633146106d457604051634755657960e01b815260040160405180910390fd5b6000546002546040516370a0823160e01b81523060048201526107709261010090046001600160a01b039081169216906370a082319060240160206040518083038186803b15801561072557600080fd5b505afa158015610739573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061075d9190611534565b6002546001600160a01b03169190610f3e565b565b60ff8116600090815260036020526040812061078d81610f73565b9392505050565b60005460ff908116908216106107d3576000546040516365d621ed60e01b815260ff808416600483015290911660248201526044015b60405180910390fd5b60ff8116600090815260036020908152604080832033845260088101909252909120548061081457604051630b3eb09f60e21b815260040160405180910390fd5b60006108208583611799565b905061082c8333610a1f565b1561083b5761083b3385610c5e565b801561084b5761084b8185610ada565b6000805460ff16808252600360205260409091209061086c90829033610dfb565b3360009081526008850160205260408120805488929061088d908490611799565b9091555050336000908152600882016020526040812080548892906108b39084906116db565b92505081905550858460040160008282546108ce9190611799565b92505081905550858160040160008282546108e991906116db565b909155505033600081815260068301602090815260408083205460088601835281842054935482518c8152938401919091529082019290925260ff90911660608201527f9a2358088aa909a8c4d7b59a65c916782d62ee73d14b851be57582ed69e3ccb09060800160405180910390a2600054604080513381526020810189905260ff888116828401529092166060830152517f546af5173ec580ce2f8eb21d6efbe16430d69c880c6d83a5f455b9f4022843ad9181900360800190a1505050505050565b60006109bf85858585600080611004565b95945050505050565b828455600284018290556000806109e560ff84166201518061172c565b6109f49062ffffff16856116db565b6003870181905560058701949094555050670de0b6b3a7640000600185015550600290920154929050565b6001600160a01b0381166000908152600683016020526040812054610a4657506000610420565b6001600160a01b0382166000908152600684016020526040812054610a6a85610f73565b610a749190611799565b6001600160a01b0384166000908152600886016020526040812054919250633b9aca00610aa18484611757565b610aab9190611718565b6001600160a01b0386166000908152600788016020526040902054610ad091906116db565b9695505050505050565b60ff808216600081815260036020526040812090549092161015610b22576000546040516365d621ed60e01b815260ff808516600483015290911660248201526044016107ca565b82600019811415610b4157503360009081526008820160205260409020545b336000908152600883016020526040902054811115610b8a573360009081526008830160205260409081902054905163cebd519360e01b815260048101919091526024016107ca565b610b95828433610dfb565b33600090815260088301602052604081208054839290610bb6908490611799565b9250508190555080826004016000828254610bd19190611799565b9091555050600154610bed906001600160a01b03163383610f3e565b3360008181526006840160209081526040808320546008870183528184205493548251878152938401919091529082019290925260ff90911660608201527f66ecb22c263001ecfe4aecc5a075cfbc877869d3fab02728b0f8bfb8b08bf6d19060800160405180910390a250505050565b60005460ff9081169082161115610c99576000546040516365d621ed60e01b815260ff808416600483015290911660248201526044016107ca565b60ff8116600090815260036020526040812090610cb68285610a1f565b905080610cd657604051632706c9e160e21b815260040160405180910390fd5b6001600160a01b0384166000908152600783016020526040812055610cfa82610f73565b6001600160a01b038086166000908152600685016020526040902091909155600254610d2891168583610f3e565b6002546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015610d6c57600080fd5b505afa158015610d80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da49190611534565b604080518481526020810183905260ff87168183015290519192506001600160a01b038716917fae4ef7abdb28a08e41e77990def7c7d8d3f4133e8838005bc1a49fe137dbfcfa9181900360600190a25050505050565b610e058382610a1f565b6001600160a01b0382166000908152600785016020526040902055610e2983610f73565b6001600160a01b03821660009081526006850160205260409020819055600184015560038301544210610e60578260030154610e62565b425b60058401556001830154600484015460408051928352602083019190915260ff84169082015233907f7994e9f3b8680cde12b3d4f603192419ae0154049b1c5cc3157262c90ab4f9239060600160405180910390a2505050565b6040516001600160a01b0380851660248301528316604482015260648101829052610f279085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526111c3565b50505050565b6000610ad086868686866000611004565b6040516001600160a01b038316602482015260448101829052610f6e90849063a9059cbb60e01b90606401610ef0565b505050565b60008082600301544210610f8b578260030154610f8d565b425b90506000836005015482610fa19190611799565b600485015490915081610fb957505050506001015490565b80610fc957505050506001015490565b84546000908290610fda9085611757565b610fe890633b9aca00611757565b610ff29190611718565b9050808660010154610ad091906116db565b60006107b25b8761ffff168161ffff1610156110605761102381611295565b1561103d576110366301e28500836116db565b915061104e565b61104b6301e13380836116db565b91505b80611058816117ff565b91505061100a565b61106861146c565b601f815261107589611295565b1561108657601d602082015261108e565b601c60208201525b601f60408201819052601e606083018190526080830182905260a0830181905260c0830182905260e0830182905261010083018190526101208301829052610140830152610160820152600191505b8760ff168261ffff16101561114d57806110f8600184611776565b61ffff16600c811061111a57634e487b7160e01b600052603260045260246000fd5b602002015161112f9060ff1662015180611757565b61113990846116db565b925081611145816117ff565b9250506110dd565b6111586001886117b0565b6111689060ff1662015180611757565b61117290846116db565b925061118360ff8716610e10611757565b61118d90846116db565b925061119d60ff8616603c611757565b6111a790846116db565b92506111b660ff8516846116db565b9998505050505050505050565b6000611218826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166112f49092919063ffffffff16565b805190915015610f6e578080602001905181019061123691906114fc565b610f6e5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016107ca565b60006112a2600483611821565b61ffff16156112b357506000919050565b6112be606483611821565b61ffff16156112cf57506001919050565b6112db61019083611821565b61ffff16156112ec57506000919050565b506001919050565b6060611303848460008561130b565b949350505050565b60608247101561136c5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016107ca565b843b6113ba5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016107ca565b600080866001600160a01b031685876040516113d6919061168c565b60006040518083038185875af1925050503d8060008114611413576040519150601f19603f3d011682016040523d82523d6000602084013e611418565b606091505b5091509150611428828286611433565b979650505050505050565b6060831561144257508161078d565b8251156114525782518084602001fd5b8160405162461bcd60e51b81526004016107ca91906116a8565b604051806101800160405280600c906020820280368337509192915050565b80356001600160a01b03811681146114a257600080fd5b919050565b803561ffff811681146114a257600080fd5b803560ff811681146114a257600080fd5b600080604083850312156114dc578182fd5b6114e58361148b565b91506114f3602084016114b9565b90509250929050565b60006020828403121561150d578081fd5b8151801515811461078d578182fd5b60006020828403121561152d578081fd5b5035919050565b600060208284031215611545578081fd5b5051919050565b600080600080600060a08688031215611563578081fd5b85359450611573602087016114a7565b9350611581604087016114b9565b925061158f606087016114b9565b915061159d608087016114b9565b90509295509295909350565b600080600080600080600060e0888a0312156115c3578182fd5b873596506115d3602089016114a7565b95506115e1604089016114b9565b94506115ef606089016114b9565b93506115fd608089016114b9565b925061160b60a089016114b9565b915061161960c089016114b9565b905092959891949750929550565b60008060408385031215611639578182fd5b823591506114f3602084016114b9565b60006020828403121561165a578081fd5b61078d826114b9565b60008060408385031215611675578182fd5b61167e836114b9565b91506114f36020840161148b565b6000825161169e8184602087016117d3565b9190910192915050565b60208152600082518060208401526116c78160408501602087016117d3565b601f01601f19169190910160400192915050565b600082198211156116ee576116ee611842565b500190565b600060ff821660ff84168060ff0382111561171057611710611842565b019392505050565b60008261172757611727611858565b500490565b600062ffffff8083168185168183048111821515161561174e5761174e611842565b02949350505050565b600081600019048311821515161561177157611771611842565b500290565b600061ffff8381169083168181101561179157611791611842565b039392505050565b6000828210156117ab576117ab611842565b500390565b600060ff821660ff8416808210156117ca576117ca611842565b90039392505050565b60005b838110156117ee5781810151838201526020016117d6565b83811115610f275750506000910152565b600061ffff8083168181141561181757611817611842565b6001019392505050565b600061ffff8084168061183657611836611858565b92169190910692915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fdfea2646970667358221220ce28beb23030de37bee90b3fe1ce4214ffba7eb4db280ba5e5b10f87bac75e4264736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063903d42961161008c578063aa1f627c11610066578063aa1f627c146102a6578063b711c5bc146102b9578063be04ffd9146102c1578063edab62f5146102d457600080fd5b8063903d42961461026d57806395d4063f14610280578063a694fc3a1461029357600080fd5b80634255a1c2116100c85780634255a1c2146102055780634574ecff1461021a5780637776768f1461023b5780638a19c8bc1461024e57600080fd5b80630ac6702a146100ef5780631b3bd5271461011f5780633b09d3b514610194575b600080fd5b600254610102906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61016761012d366004611649565b60ff166000908152600360208190526040909120805460018201546002830154938301546004840154600590940154929591949390929091565b604080519687526020870195909552938501929092526060840152608083015260a082015260c001610116565b6101ea6101a2366004611663565b60ff9190911660009081526003602090815260408083206001600160a01b03909416835260068401825280832054600785018352818420546008909501909252909120549092565b60408051938452602084019290925290820152606001610116565b61021861021336600461154c565b6102e7565b005b61022d6102283660046114ca565b610400565b604051908152602001610116565b600154610102906001600160a01b031681565b60005461025b9060ff1681565b60405160ff9091168152602001610116565b61021861027b366004611627565b610426565b61021861028e366004611649565b610434565b6102186102a136600461151c565b610441565b6102186102b43660046115a9565b61059e565b6102186106a4565b61022d6102cf366004611649565b610772565b6102186102e2366004611627565b610794565b60005461010090046001600160a01b0316331461031757604051634755657960e01b815260040160405180910390fd5b6000805460ff16815260036020526040812090610337868686600a6109ae565b9050816003015481101561035e5760405163d2b3b7e960e01b815260040160405180910390fd5b600080546103709060ff1660016116f3565b60ff81166000908152600360205260408120919250908190610394908b86896109c8565b6000805460ff191660ff8716908117909155604080518e815260208101859052908101839052606081019190915291935091507f332ab8cb2abb1a5c0619be13c533c05a84279ef1d2d78814f594f39df59122419060800160405180910390a150505050505050505050565b60ff8116600090815260036020526040812061041c8185610a1f565b9150505b92915050565b6104308282610ada565b5050565b61043e3382610c5e565b50565b6000805460ff168082526003602052604090912090610473576040516350f7da1560e11b815260040160405180910390fd5b42816003015410806104885750428160020154115b156104a657604051636a67d54960e01b815260040160405180910390fd5b816104c4576040516315ad0dc760e21b815260040160405180910390fd5b6000546104d690829060ff1633610dfb565b6001546104ee906001600160a01b0316333085610ebc565b3360009081526008820160205260408120805484929061050f9084906116db565b925050819055508181600401600082825461052a91906116db565b90915550503360008181526006830160209081526040808320546008860183528184205493548251888152938401919091529082019290925260ff90911660608201527f9a2358088aa909a8c4d7b59a65c916782d62ee73d14b851be57582ed69e3ccb09060800160405180910390a25050565b60005461010090046001600160a01b031633146105ce57604051634755657960e01b815260040160405180910390fd5b6000805460ff168152600360205260408120906105ee8888888888610f2d565b60008054919250906106049060ff1660016116f3565b60ff81166000908152600360205260408120919250908190610628908d86896109c8565b6000805460ff871660ff1990911681179091556040519294509092507f332ab8cb2abb1a5c0619be13c533c05a84279ef1d2d78814f594f39df59122419161068e918f91869186919384526020840192909252604083015260ff16606082015260800190565b60405180910390a1505050505050505050505050565b60005461010090046001600160a01b031633146106d457604051634755657960e01b815260040160405180910390fd5b6000546002546040516370a0823160e01b81523060048201526107709261010090046001600160a01b039081169216906370a082319060240160206040518083038186803b15801561072557600080fd5b505afa158015610739573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061075d9190611534565b6002546001600160a01b03169190610f3e565b565b60ff8116600090815260036020526040812061078d81610f73565b9392505050565b60005460ff908116908216106107d3576000546040516365d621ed60e01b815260ff808416600483015290911660248201526044015b60405180910390fd5b60ff8116600090815260036020908152604080832033845260088101909252909120548061081457604051630b3eb09f60e21b815260040160405180910390fd5b60006108208583611799565b905061082c8333610a1f565b1561083b5761083b3385610c5e565b801561084b5761084b8185610ada565b6000805460ff16808252600360205260409091209061086c90829033610dfb565b3360009081526008850160205260408120805488929061088d908490611799565b9091555050336000908152600882016020526040812080548892906108b39084906116db565b92505081905550858460040160008282546108ce9190611799565b92505081905550858160040160008282546108e991906116db565b909155505033600081815260068301602090815260408083205460088601835281842054935482518c8152938401919091529082019290925260ff90911660608201527f9a2358088aa909a8c4d7b59a65c916782d62ee73d14b851be57582ed69e3ccb09060800160405180910390a2600054604080513381526020810189905260ff888116828401529092166060830152517f546af5173ec580ce2f8eb21d6efbe16430d69c880c6d83a5f455b9f4022843ad9181900360800190a1505050505050565b60006109bf85858585600080611004565b95945050505050565b828455600284018290556000806109e560ff84166201518061172c565b6109f49062ffffff16856116db565b6003870181905560058701949094555050670de0b6b3a7640000600185015550600290920154929050565b6001600160a01b0381166000908152600683016020526040812054610a4657506000610420565b6001600160a01b0382166000908152600684016020526040812054610a6a85610f73565b610a749190611799565b6001600160a01b0384166000908152600886016020526040812054919250633b9aca00610aa18484611757565b610aab9190611718565b6001600160a01b0386166000908152600788016020526040902054610ad091906116db565b9695505050505050565b60ff808216600081815260036020526040812090549092161015610b22576000546040516365d621ed60e01b815260ff808516600483015290911660248201526044016107ca565b82600019811415610b4157503360009081526008820160205260409020545b336000908152600883016020526040902054811115610b8a573360009081526008830160205260409081902054905163cebd519360e01b815260048101919091526024016107ca565b610b95828433610dfb565b33600090815260088301602052604081208054839290610bb6908490611799565b9250508190555080826004016000828254610bd19190611799565b9091555050600154610bed906001600160a01b03163383610f3e565b3360008181526006840160209081526040808320546008870183528184205493548251878152938401919091529082019290925260ff90911660608201527f66ecb22c263001ecfe4aecc5a075cfbc877869d3fab02728b0f8bfb8b08bf6d19060800160405180910390a250505050565b60005460ff9081169082161115610c99576000546040516365d621ed60e01b815260ff808416600483015290911660248201526044016107ca565b60ff8116600090815260036020526040812090610cb68285610a1f565b905080610cd657604051632706c9e160e21b815260040160405180910390fd5b6001600160a01b0384166000908152600783016020526040812055610cfa82610f73565b6001600160a01b038086166000908152600685016020526040902091909155600254610d2891168583610f3e565b6002546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015610d6c57600080fd5b505afa158015610d80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da49190611534565b604080518481526020810183905260ff87168183015290519192506001600160a01b038716917fae4ef7abdb28a08e41e77990def7c7d8d3f4133e8838005bc1a49fe137dbfcfa9181900360600190a25050505050565b610e058382610a1f565b6001600160a01b0382166000908152600785016020526040902055610e2983610f73565b6001600160a01b03821660009081526006850160205260409020819055600184015560038301544210610e60578260030154610e62565b425b60058401556001830154600484015460408051928352602083019190915260ff84169082015233907f7994e9f3b8680cde12b3d4f603192419ae0154049b1c5cc3157262c90ab4f9239060600160405180910390a2505050565b6040516001600160a01b0380851660248301528316604482015260648101829052610f279085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526111c3565b50505050565b6000610ad086868686866000611004565b6040516001600160a01b038316602482015260448101829052610f6e90849063a9059cbb60e01b90606401610ef0565b505050565b60008082600301544210610f8b578260030154610f8d565b425b90506000836005015482610fa19190611799565b600485015490915081610fb957505050506001015490565b80610fc957505050506001015490565b84546000908290610fda9085611757565b610fe890633b9aca00611757565b610ff29190611718565b9050808660010154610ad091906116db565b60006107b25b8761ffff168161ffff1610156110605761102381611295565b1561103d576110366301e28500836116db565b915061104e565b61104b6301e13380836116db565b91505b80611058816117ff565b91505061100a565b61106861146c565b601f815261107589611295565b1561108657601d602082015261108e565b601c60208201525b601f60408201819052601e606083018190526080830182905260a0830181905260c0830182905260e0830182905261010083018190526101208301829052610140830152610160820152600191505b8760ff168261ffff16101561114d57806110f8600184611776565b61ffff16600c811061111a57634e487b7160e01b600052603260045260246000fd5b602002015161112f9060ff1662015180611757565b61113990846116db565b925081611145816117ff565b9250506110dd565b6111586001886117b0565b6111689060ff1662015180611757565b61117290846116db565b925061118360ff8716610e10611757565b61118d90846116db565b925061119d60ff8616603c611757565b6111a790846116db565b92506111b660ff8516846116db565b9998505050505050505050565b6000611218826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166112f49092919063ffffffff16565b805190915015610f6e578080602001905181019061123691906114fc565b610f6e5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016107ca565b60006112a2600483611821565b61ffff16156112b357506000919050565b6112be606483611821565b61ffff16156112cf57506001919050565b6112db61019083611821565b61ffff16156112ec57506000919050565b506001919050565b6060611303848460008561130b565b949350505050565b60608247101561136c5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016107ca565b843b6113ba5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016107ca565b600080866001600160a01b031685876040516113d6919061168c565b60006040518083038185875af1925050503d8060008114611413576040519150601f19603f3d011682016040523d82523d6000602084013e611418565b606091505b5091509150611428828286611433565b979650505050505050565b6060831561144257508161078d565b8251156114525782518084602001fd5b8160405162461bcd60e51b81526004016107ca91906116a8565b604051806101800160405280600c906020820280368337509192915050565b80356001600160a01b03811681146114a257600080fd5b919050565b803561ffff811681146114a257600080fd5b803560ff811681146114a257600080fd5b600080604083850312156114dc578182fd5b6114e58361148b565b91506114f3602084016114b9565b90509250929050565b60006020828403121561150d578081fd5b8151801515811461078d578182fd5b60006020828403121561152d578081fd5b5035919050565b600060208284031215611545578081fd5b5051919050565b600080600080600060a08688031215611563578081fd5b85359450611573602087016114a7565b9350611581604087016114b9565b925061158f606087016114b9565b915061159d608087016114b9565b90509295509295909350565b600080600080600080600060e0888a0312156115c3578182fd5b873596506115d3602089016114a7565b95506115e1604089016114b9565b94506115ef606089016114b9565b93506115fd608089016114b9565b925061160b60a089016114b9565b915061161960c089016114b9565b905092959891949750929550565b60008060408385031215611639578182fd5b823591506114f3602084016114b9565b60006020828403121561165a578081fd5b61078d826114b9565b60008060408385031215611675578182fd5b61167e836114b9565b91506114f36020840161148b565b6000825161169e8184602087016117d3565b9190910192915050565b60208152600082518060208401526116c78160408501602087016117d3565b601f01601f19169190910160400192915050565b600082198211156116ee576116ee611842565b500190565b600060ff821660ff84168060ff0382111561171057611710611842565b019392505050565b60008261172757611727611858565b500490565b600062ffffff8083168185168183048111821515161561174e5761174e611842565b02949350505050565b600081600019048311821515161561177157611771611842565b500290565b600061ffff8381169083168181101561179157611791611842565b039392505050565b6000828210156117ab576117ab611842565b500390565b600060ff821660ff8416808210156117ca576117ca611842565b90039392505050565b60005b838110156117ee5781810151838201526020016117d6565b83811115610f275750506000910152565b600061ffff8083168181141561181757611817611842565b6001019392505050565b600061ffff8084168061183657611836611858565b92169190910692915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fdfea2646970667358221220ce28beb23030de37bee90b3fe1ce4214ffba7eb4db280ba5e5b10f87bac75e4264736f6c63430008040033",
  "devdoc": {
    "author": "Elysia",
    "kind": "dev",
    "methods": {
      "claim(uint8)": {
        "params": {
          "round": "The round to claim"
        }
      },
      "getPoolData(uint8)": {
        "params": {
          "round": "The round of the pool"
        },
        "returns": {
          "endTimestamp": "The end timestamp of the round",
          "lastUpdateTimestamp": "The last update timestamp of the round",
          "rewardIndex": "The reward index of the round",
          "rewardPerSecond": "The total reward accrued per second in the round",
          "startTimestamp": "The start timestamp of the round",
          "totalPrincipal": "The total staked amount of the round"
        }
      },
      "getUserData(uint8,address)": {
        "params": {
          "round": "The round of the pool",
          "user": "The user address"
        }
      },
      "initNewRound(uint256,uint16,uint8,uint8,uint8)": {
        "params": {
          "day": "The round start day",
          "duration": "The duration of the initiated round",
          "month": "The round start month",
          "rewardPerSecond": "The total accrued reward per second in new round",
          "year": "The round start year"
        }
      },
      "initNewRound(uint256,uint16,uint8,uint8,uint8,uint8,uint8)": {
        "params": {
          "day": "The round start day",
          "duration": "The duration of the initiated round",
          "month": "The round start month",
          "rewardPerSecond": "The total accrued reward per second in new round",
          "year": "The round start year"
        }
      },
      "migrate(uint256,uint8)": {
        "params": {
          "amount": "Amount to migrate.",
          "round": "The closed round to migrate"
        }
      },
      "stake(uint256)": {
        "params": {
          "amount": "Amount to stake."
        }
      },
      "withdraw(uint256,uint8)": {
        "params": {
          "amount": "Amount to withdraw",
          "round": "The round to withdraw"
        }
      }
    },
    "title": "Elyfi StakingPool contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "claim(uint8)": {
        "notice": "Transfer accrued reward to msg.sender. User accrued reward will be reset and user reward index will be set to the current reward index."
      },
      "getPoolData(uint8)": {
        "notice": "Returns the state and data of the round"
      },
      "getUserData(uint8,address)": {
        "notice": "Returns the state and data of the user"
      },
      "initNewRound(uint256,uint16,uint8,uint8,uint8)": {
        "notice": "Init the new round. After the round closed, staking is not allowed."
      },
      "initNewRound(uint256,uint16,uint8,uint8,uint8,uint8,uint8)": {
        "notice": "Init the new round. After the round closed, staking is not allowed."
      },
      "migrate(uint256,uint8)": {
        "notice": "Migrate the amount of principal to the current round and transfer the rest principal to the caller"
      },
      "stake(uint256)": {
        "notice": "Stake the amount of staking asset to pool contract and update data."
      },
      "withdraw(uint256,uint8)": {
        "notice": "Withdraw the amount of principal from the pool contract and update data"
      }
    },
    "notice": "Users can stake their asset and earn reward for their staking. The reward calculation is based on the reward index and user balance. The amount of reward index change is inversely proportional to the total amount of supply. Accrued rewards can be obtained by multiplying the difference between the user index and the current index by the user balance. User index and the pool index is updated and aligned with in the staking and withdrawing action.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3668,
        "contract": "contracts/test/StakingPoolTest.sol:StakingPoolTest",
        "label": "currentRound",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 3670,
        "contract": "contracts/test/StakingPoolTest.sol:StakingPoolTest",
        "label": "_admin",
        "offset": 1,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3673,
        "contract": "contracts/test/StakingPoolTest.sol:StakingPoolTest",
        "label": "stakingAsset",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)623"
      },
      {
        "astId": 3676,
        "contract": "contracts/test/StakingPoolTest.sol:StakingPoolTest",
        "label": "rewardAsset",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC20)623"
      },
      {
        "astId": 3681,
        "contract": "contracts/test/StakingPoolTest.sol:StakingPoolTest",
        "label": "_rounds",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint8,t_struct(PoolData)3666_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)623": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint8,t_struct(PoolData)3666_storage)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => struct StakingPoolTest.PoolData)",
        "numberOfBytes": "32",
        "value": "t_struct(PoolData)3666_storage"
      },
      "t_struct(PoolData)3666_storage": {
        "encoding": "inplace",
        "label": "struct StakingPoolTest.PoolData",
        "members": [
          {
            "astId": 3643,
            "contract": "contracts/test/StakingPoolTest.sol:StakingPoolTest",
            "label": "rewardPerSecond",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3645,
            "contract": "contracts/test/StakingPoolTest.sol:StakingPoolTest",
            "label": "rewardIndex",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3647,
            "contract": "contracts/test/StakingPoolTest.sol:StakingPoolTest",
            "label": "startTimestamp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3649,
            "contract": "contracts/test/StakingPoolTest.sol:StakingPoolTest",
            "label": "endTimestamp",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 3651,
            "contract": "contracts/test/StakingPoolTest.sol:StakingPoolTest",
            "label": "totalPrincipal",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 3653,
            "contract": "contracts/test/StakingPoolTest.sol:StakingPoolTest",
            "label": "lastUpdateTimestamp",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 3657,
            "contract": "contracts/test/StakingPoolTest.sol:StakingPoolTest",
            "label": "userIndex",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 3661,
            "contract": "contracts/test/StakingPoolTest.sol:StakingPoolTest",
            "label": "userReward",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 3665,
            "contract": "contracts/test/StakingPoolTest.sol:StakingPoolTest",
            "label": "userPrincipal",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}